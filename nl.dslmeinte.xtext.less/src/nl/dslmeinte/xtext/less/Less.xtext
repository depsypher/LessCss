grammar nl.dslmeinte.xtext.less.Less with org.eclipse.xtext.common.Terminals hidden(WS, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate less "http://www.dslmeinte.nl/xtext/less/Less"


LessFile:
	statements+=Statement*;

Statement:
	VariableDeclaration | RuleSet | CommentStatement | ImportStatement
	;

VariableDeclaration:
	'@' name=ID ':' value=ValueExpression ';'
	;

CommentStatement:
	comment=ML_COMMENT
	;

ImportStatement:
	'@import' importURI=STRING
	;
	// TODO  tweak ImportUriGlobalScopeProvider to check on the importURI's extension and behave accordingly

terminal ESCAPED_VALUE: '~' -> ';';

terminal JAVASCRIPT_EVAL: '`' -> '`';

// re-definition of ID to allow hyphens:
terminal ID:
	'^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*
	;

/*
 * For now: interpolate STRINGs during generation but don't support the
 * syntax on a grammar level yet. (TODO)
 */


RuleSet:
	selector=SelectorExpression
	('(' ')')?	// TODO  add parametrization
	'{'
		statements+=Rule (';' statements+=Rule)* ';'?
	'}'
	;

/*
 * +----------------------+
 * | Selector expressions |
 * +----------------------+
 * 
 * From high to low precedence:
 * 
 * - atomic (primary): simple selector
 * - postfix: pseudo-class, ID, class	(latter two are now atomic <-- TODO)
 * - infix: child, adjacent sibling, descendant		(TODO  two different level now: fix)
 */

SelectorExpression:
	InfixSelectorExpression
	;

InfixSelectorExpression returns SelectorExpression:
	PostfixSelectorExpression (
		  {DescendantSelector.left=current}				right=PostfixSelectorExpression
		| {ChildSelector.left=current} '>'				right=PostfixSelectorExpression
		| {AdjacentSiblingSelector.left=current} '+'	right=PostfixSelectorExpression
	)*
	;

PostfixSelectorExpression returns SelectorExpression hidden():
	PrimarySelectorExpression ({PseudoClassSelector.operand=current} ':' pseudoClass=PseudoClasses)?
	;

enum PseudoClasses:
	  active | after | before
	| firstChild='first-child' | firstLetter='first-letter' | firstLine='first-line'
	| focus | hover | lang | link | visited
	;

PrimarySelectorExpression returns SelectorExpression:
	SimpleSelector
	;

SimpleSelector:
	UniversalSelector | IDSelector | ClassSelector | TypeSelector
	;

UniversalSelector:
	{UniversalSelector} '*'
	;

IDSelector hidden():
	'#' name=ID
	;

ClassSelector hidden():
	'.' name=ID
	;

TypeSelector:
	type=HtmlElements
	;

enum HtmlElements:
	a
	;
	// TODO  generate into this grammar from other DSL...

Rule:
	RuleSet | Mixin | Property
	;

Mixin hidden():
	'.' ruleSet=[RuleSet]
	;
	// scoping: all top-level Group-s that have a selector expression of the form '.ID'

Property:
	name=PropertyName ':' value=ValueExpression
	;

PropertyName:
	KnownPropertyName | UnknownPropertyName
	;

KnownPropertyName:
	name=KnowProperties
	;

enum KnowProperties:
	color | border_top='border-top' // | ..
	;
	// TODO  generate into this grammar from other DSL...

UnknownPropertyName:
	name=ID
	;


/*
 * +-------------------+
 * | Value expressions |
 * +-------------------+
 */

ValueExpression:
	JuxtapositionExpression
	;

JuxtapositionExpression returns ValueExpression:
	AdditiveExpression ({JuxtapositionValueExpression.left=current} right=AdditiveExpression)*
	;
	// TODO  fix juxtaposition

AdditiveExpression returns ValueExpression:
	MultiplicativeExpression ({AdditiveExpression.left=current} operator=AdditiveOperators right=MultiplicativeExpression)*
	;

enum AdditiveOperators:
	plus='+' | minus='-'
	;

MultiplicativeExpression returns ValueExpression:
	PrimaryValueExpression ({MultiplicativeExpression.left=current} operator=MultiplicativeOperators right=PrimaryValueExpression)*
	;

enum MultiplicativeOperators:
	mult='*' | div='/' | mod='%'
	;

PrimaryValueExpression returns ValueExpression:
	  '(' ValueExpression ')'
	| VariableReference
	| Literal
	;

VariableReference hidden():
	'@' variable=[VariableDeclaration]	// TODO  make higher-order as well
	;

Literal:
	DimensionLiteral | StringLiteral | ColorLiteral | BareWordLiteral
	;

DimensionLiteral hidden():
	(int=INT | decimal=DECIMAL) //dimension=Dimensions?
		// FIXME  dimension postfix leads to non-LL(*) grammar
	;

terminal DECIMAL returns ecore::EDouble: ('-')?('0'..'9')+ '.' ('0'..'9')+;


enum Dimensions:
	px | pt | perc='%'
	;

StringLiteral:
	value=STRING
	;

ColorLiteral:
	  {RGBColor} rgb=RGB_COLOR
	| {NamedColor} color=ColorNames
	;

enum ColorNames:
	black | white // | ...
	;
	// TODO  generate into this grammar from other DSL

terminal RGB_COLOR:
	'#' ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	// TODO  provide validation

BareWordLiteral:
	bareWord=ID
	;

