grammar nl.dslmeinte.xtext.less.Less with nl.dslmeinte.xtext.css.CSS hidden(WS, SL_COMMENT)

generate less "http://www.dslmeinte.nl/xtext/less"


LessFile:
	statements+=Statement*;

Statement:
	(VariableDefinition ';') | RuleSet | VisibleComment | Import
	;

VariableDefinition:
	name=VariableDeclaration ':' value=ValueExpression
	;

VariableDeclaration:
	name=AT_ID
	;

VisibleComment:
	comment=ML_COMMENT
	;

Import:
	'@import' importURI=STRING
	;
	// TODO  tweak ImportUriGlobalScopeProvider to check on the importURI's extension and behave accordingly


RuleSet:
	selectors+=SelectorExpression (',' selectors+=SelectorExpression)*
	( '(' ( parameters+=Parameter (',' parameters+=Parameter )* )? ')' )?
	'{'
		(members+=RuleSetMemberSemiColonDelimited ';' | members+=RuleSet)*
//		(members+=RuleSetMemberSemiColonDelimited)?
	'}'
	;
	/*
	 * Note that semi-colons are now required everywhere.
	 * (Uncommenting the commented-out line leads to non-LL(*) behavior.)
	 */

Parameter:
	var=VariableDeclaration (':' defaultValue=ValueExpression)?
	;

// re-def. of PrimarySelectorExpression from CSS to incorporate &-combinator
PrimarySelectorExpression returns SelectorExpression:
	  {SimpleSelectorIndirection} selector=SimpleSelector
	| {ParentCombinatorSelector} '&'
	;

RuleSetMember:	// convenience super type
	RuleSet | RuleSetMemberSemiColonDelimited
	;

RuleSetMemberSemiColonDelimited:
	MixinCall | PropertyExpression | VariableDefinition
	;

MixinCall:
	ruleSet=[RuleSet|DOT_ID]
		( '(' arguments+=ValueExpression (',' arguments+=ValueExpression)* ')' )?
	;
	// scoping of ruleSet: all mixin candidates

PropertyExpression:
	KnownPropertyExpression | UnknownPropertyExpression
	;

KnownPropertyExpression:
	name=KnownProperties ':' values+=ValueExpression+
	;

UnknownPropertyExpression:
	name=ID ':' values+=ValueExpression+
	;


/*
 * +-------------------+
 * | Value expressions |
 * +-------------------+
 */

ValueExpression:
	AdditiveExpression
	;

AdditiveExpression returns ValueExpression:
	MultiplicativeExpression ({AdditiveExpression.left=current} operator=AdditiveOperators right=MultiplicativeExpression)*
	;

enum AdditiveOperators:
	plus='+' | minus='-'
	;

MultiplicativeExpression returns ValueExpression:
	ColorFunctionExpression ({MultiplicativeExpression.left=current} operator=MultiplicativeOperators right=ColorFunctionExpression)*
	;

enum MultiplicativeOperators:
	mult='*' | div='/'
	;
	// note that a '%' modulo operator would cause non-LL(*) behavior in combination with the % dimension in (css::)NumberLiteral

ColorFunctionExpression returns ValueExpression:
	  PrimaryValueExpression
	| {ColorFunctionCall} function=ColorFunctions '(' color=ValueExpression ',' modifier=NumberLiteral ')'
	;
	// TODO  validation

enum ColorFunctions:
	  lighten | darken
	| saturate | desaturate
	| fadein | fadeout
	| spin
	| hue | saturation | lightness
	;

PrimaryValueExpression returns ValueExpression:
	  '(' ValueExpression ')'
	| VariableReference
	| {ArgumentsReference} '@arguments'
	| {CSSLiteral}			value=ValueLiteral
	| {EscapedLiteral}		value=ESCAPED_VALUE
	| {JavascriptLiteral}	value=JAVASCRIPT_EVAL
	;

VariableReference:
	(indirections+='@')* variable=[VariableDeclaration|AT_ID]
	;
	// (.indirections counts the level of indirection)
	// validation:
	//   e.g., in @@var, the value of @var must be the (@-less) name of an existing variable
	// scoping:
	//   - mimic nesting of rule sets

// re-def. from CSS grammar to make it possible to use expressions:
ComponentColorLiteral:
	  {ComponentRGBColor} 'rgb' '(' red=ValueExpression ',' green=ValueExpression ',' blue=ValueExpression ')'
	| {ComponentHSLColor} 'hsl' '(' hue=ValueExpression ',' saturation=ValueExpression ',' lightness=ValueExpression ')'
	;


/*
 * +-----------+
 * | Terminals |
 * +-----------+
 */

terminal AT_ID: '@' PREFIXABLE_ID_START ID_PART* ;
	// LessValueConverterService#AT_ID takes care of removing the @

terminal ESCAPED_VALUE: '~' -> ( ';' | '}' ) ;

terminal JAVASCRIPT_EVAL: '`' -> '`' ;

/*
 * For now: interpolate STRINGs during generation but don't support the
 * syntax on a grammar level yet - which would require a custom lexer... (TODO)
 */

