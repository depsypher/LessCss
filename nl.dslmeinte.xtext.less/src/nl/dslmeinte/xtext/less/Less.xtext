grammar nl.dslmeinte.xtext.less.Less with nl.dslmeinte.xtext.css.CSS hidden(WS, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate less "http://www.dslmeinte.nl/xtext/less/Less"


LessFile:
	statements+=Statement*;

Statement:
	VariableDeclaration | RuleSet | CommentStatement | ImportStatement
	;

VariableDeclaration:
	'@' name=ID ':' value=ValueExpression ';'
	;

CommentStatement:
	comment=ML_COMMENT
	;

ImportStatement:
	'@import' importURI=STRING
	;
	// TODO  tweak ImportUriGlobalScopeProvider to check on the importURI's extension and behave accordingly

terminal ESCAPED_VALUE: '~' -> ';';

terminal JAVASCRIPT_EVAL: '`' -> '`';

/*
 * For now: interpolate STRINGs during generation but don't support the
 * syntax on a grammar level yet. (TODO)
 */


RuleSet:
	selector=SelectorExpression
	('(' ')')?	// TODO  add parametrization
	'{'
		statements+=Rule (';' statements+=Rule)* ';'?
	'}'
	;
	// TODO  add &-combinator to SelectorExpression syntax

Rule:
	RuleSet | Mixin | PropertyValueExpression
	;

Mixin hidden():
	'.' ruleSet=[RuleSet]
	;
	// scoping: all top-level Group-s that have a selector expression of the form '.ID'

PropertyValueExpression:
	name=PropertyName ':' values+=ValueExpression+
	;


/*
 * +-------------------+
 * | Value expressions |
 * +-------------------+
 */

ValueExpression:
	AdditiveExpression
	;

AdditiveExpression returns ValueExpression:
	MultiplicativeExpression ({AdditiveExpression.left=current} operator=AdditiveOperators right=MultiplicativeExpression)*
	;

enum AdditiveOperators:
	plus='+' | minus='-'
	;

MultiplicativeExpression returns ValueExpression:
	PrimaryValueExpression ({MultiplicativeExpression.left=current} operator=MultiplicativeOperators right=PrimaryValueExpression)*
	;

enum MultiplicativeOperators:
	mult='*' | div='/' // | mod='%'
		// FIXME  causes problems in combination with percentage dimension
	;

PrimaryValueExpression returns ValueExpression:
	  '(' ValueExpression ')'
	| VariableReference
	| Literal
	;

Literal:
	value=ValueLiteral
	;

VariableReference hidden():
	'@' variable=[VariableDeclaration]
	;

