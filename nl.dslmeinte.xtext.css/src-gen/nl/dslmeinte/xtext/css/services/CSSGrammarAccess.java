/*
* generated by Xtext
*/

package nl.dslmeinte.xtext.css.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CSSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StylesheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stylesheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cCharsetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cCharSetAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCharSetSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cCharSetAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportDeclarationParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsCSSTopLevelStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		
		/// *
		// * +------------------------------+
		// * | CSS2.1 document-level syntax |
		// * +------------------------------+
		// * 
		// * see: http://www.w3.org/TR/CSS21/grammar.html
		// * / Stylesheet:
		//	("@charset" charSet=STRING ";")? imports+=ImportDeclaration* statements+=CSSTopLevelStatement*;
		public ParserRule getRule() { return rule; }

		//("@charset" charSet=STRING ";")? imports+=ImportDeclaration* statements+=CSSTopLevelStatement*
		public Group getGroup() { return cGroup; }

		//("@charset" charSet=STRING ";")?
		public Group getGroup_0() { return cGroup_0; }

		//"@charset"
		public Keyword getCharsetKeyword_0_0() { return cCharsetKeyword_0_0; }

		//charSet=STRING
		public Assignment getCharSetAssignment_0_1() { return cCharSetAssignment_0_1; }

		//STRING
		public RuleCall getCharSetSTRINGTerminalRuleCall_0_1_0() { return cCharSetSTRINGTerminalRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//imports+=ImportDeclaration*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//ImportDeclaration
		public RuleCall getImportsImportDeclarationParserRuleCall_1_0() { return cImportsImportDeclarationParserRuleCall_1_0; }

		//statements+=CSSTopLevelStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//CSSTopLevelStatement
		public RuleCall getStatementsCSSTopLevelStatementParserRuleCall_2_0() { return cStatementsCSSTopLevelStatementParserRuleCall_2_0; }
	}

	public class CSSTopLevelStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSTopLevelStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleSetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCSSOtherTopLevelDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// TODO  CDO/CDC stuff (i.e. '<!--' vs. '-->')
		//CSSTopLevelStatement:
		//	RuleSet | CSSOtherTopLevelDeclaration;
		public ParserRule getRule() { return rule; }

		//RuleSet | CSSOtherTopLevelDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleSet
		public RuleCall getRuleSetParserRuleCall_0() { return cRuleSetParserRuleCall_0; }

		//CSSOtherTopLevelDeclaration
		public RuleCall getCSSOtherTopLevelDeclarationParserRuleCall_1() { return cCSSOtherTopLevelDeclarationParserRuleCall_1; }
	}

	public class CSSOtherTopLevelDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSSOtherTopLevelDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMediaDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPageDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNamespaceDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFontFaceDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//CSSOtherTopLevelDeclaration:
		//	MediaDeclaration | PageDeclaration | NamespaceDeclaration | FontFaceDeclaration;
		public ParserRule getRule() { return rule; }

		//MediaDeclaration | PageDeclaration | NamespaceDeclaration | FontFaceDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//MediaDeclaration
		public RuleCall getMediaDeclarationParserRuleCall_0() { return cMediaDeclarationParserRuleCall_0; }

		//PageDeclaration
		public RuleCall getPageDeclarationParserRuleCall_1() { return cPageDeclarationParserRuleCall_1; }

		//NamespaceDeclaration
		public RuleCall getNamespaceDeclarationParserRuleCall_2() { return cNamespaceDeclarationParserRuleCall_2; }

		//FontFaceDeclaration
		public RuleCall getFontFaceDeclarationParserRuleCall_3() { return cFontFaceDeclarationParserRuleCall_3; }
	}

	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImportURIAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0_0 = (RuleCall)cImportURIAssignment_1_0.eContents().get(0);
		private final Assignment cUrlAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cUrlURLTerminalRuleCall_1_1_0 = (RuleCall)cUrlAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMediaAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMediaIDENTTerminalRuleCall_2_0_0 = (RuleCall)cMediaAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMediaAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMediaIDENTTerminalRuleCall_2_1_1_0 = (RuleCall)cMediaAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ImportDeclaration:
		//	"@import" (importURI=STRING | url=URL) (media+=IDENT ("," media+=IDENT)*)? ";";
		public ParserRule getRule() { return rule; }

		//"@import" (importURI=STRING | url=URL) (media+=IDENT ("," media+=IDENT)*)? ";"
		public Group getGroup() { return cGroup; }

		//"@import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING | url=URL
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1_0() { return cImportURIAssignment_1_0; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0_0() { return cImportURISTRINGTerminalRuleCall_1_0_0; }

		//url=URL
		public Assignment getUrlAssignment_1_1() { return cUrlAssignment_1_1; }

		//URL
		public RuleCall getUrlURLTerminalRuleCall_1_1_0() { return cUrlURLTerminalRuleCall_1_1_0; }

		//(media+=IDENT ("," media+=IDENT)*)?
		public Group getGroup_2() { return cGroup_2; }

		//media+=IDENT
		public Assignment getMediaAssignment_2_0() { return cMediaAssignment_2_0; }

		//IDENT
		public RuleCall getMediaIDENTTerminalRuleCall_2_0_0() { return cMediaIDENTTerminalRuleCall_2_0_0; }

		//("," media+=IDENT)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//media+=IDENT
		public Assignment getMediaAssignment_2_1_1() { return cMediaAssignment_2_1_1; }

		//IDENT
		public RuleCall getMediaIDENTTerminalRuleCall_2_1_1_0() { return cMediaIDENTTerminalRuleCall_2_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class MediaDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MediaDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMediaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMediaQueriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMediaQueriesMediaQueryParserRuleCall_1_0 = (RuleCall)cMediaQueriesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMediaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMediaMediaQueryParserRuleCall_2_1_0 = (RuleCall)cMediaAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersMediaDeclarationMembersParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MediaDeclaration:
		//	"@media" mediaQueries+=MediaQuery ("," media+=MediaQuery)* "{" members+=MediaDeclarationMembers* "}";
		public ParserRule getRule() { return rule; }

		//"@media" mediaQueries+=MediaQuery ("," media+=MediaQuery)* "{" members+=MediaDeclarationMembers* "}"
		public Group getGroup() { return cGroup; }

		//"@media"
		public Keyword getMediaKeyword_0() { return cMediaKeyword_0; }

		//mediaQueries+=MediaQuery
		public Assignment getMediaQueriesAssignment_1() { return cMediaQueriesAssignment_1; }

		//MediaQuery
		public RuleCall getMediaQueriesMediaQueryParserRuleCall_1_0() { return cMediaQueriesMediaQueryParserRuleCall_1_0; }

		//("," media+=MediaQuery)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//media+=MediaQuery
		public Assignment getMediaAssignment_2_1() { return cMediaAssignment_2_1; }

		//MediaQuery
		public RuleCall getMediaMediaQueryParserRuleCall_2_1_0() { return cMediaMediaQueryParserRuleCall_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//members+=MediaDeclarationMembers*
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }

		//MediaDeclarationMembers
		public RuleCall getMembersMediaDeclarationMembersParserRuleCall_4_0() { return cMembersMediaDeclarationMembersParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class MediaDeclarationMembersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MediaDeclarationMembers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleSetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyDeclarationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//MediaDeclarationMembers:
		//	RuleSet | PropertyDeclaration ";";
		public ParserRule getRule() { return rule; }

		//RuleSet | PropertyDeclaration ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleSet
		public RuleCall getRuleSetParserRuleCall_0() { return cRuleSetParserRuleCall_0; }

		//PropertyDeclaration ";"
		public Group getGroup_1() { return cGroup_1; }

		//PropertyDeclaration
		public RuleCall getPropertyDeclarationParserRuleCall_1_0() { return cPropertyDeclarationParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class MediaQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MediaQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cOnlyAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cOnlyOnlyKeyword_0_0_0_0 = (Keyword)cOnlyAssignment_0_0_0.eContents().get(0);
		private final Assignment cNotAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cNotNotKeyword_0_0_1_0 = (Keyword)cNotAssignment_0_0_1.eContents().get(0);
		private final Assignment cMediaTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMediaTypeIDENTTerminalRuleCall_0_1_0 = (RuleCall)cMediaTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cAndKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cExpressionsMediaQueryExpressionParserRuleCall_0_2_1_0 = (RuleCall)cExpressionsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsMediaQueryExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionsMediaQueryExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpressionsAssignment_1_1_1.eContents().get(0);
		
		//MediaQuery:
		//	(only?="only" | not?="not")? mediaType=IDENT ("and" expressions+=MediaQueryExpression)* |
		//	expressions+=MediaQueryExpression ("and" expressions+=MediaQueryExpression)*;
		public ParserRule getRule() { return rule; }

		//(only?="only" | not?="not")? mediaType=IDENT ("and" expressions+=MediaQueryExpression)* |
		//expressions+=MediaQueryExpression ("and" expressions+=MediaQueryExpression)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//(only?="only" | not?="not")? mediaType=IDENT ("and" expressions+=MediaQueryExpression)*
		public Group getGroup_0() { return cGroup_0; }

		//(only?="only" | not?="not")?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//only?="only"
		public Assignment getOnlyAssignment_0_0_0() { return cOnlyAssignment_0_0_0; }

		//"only"
		public Keyword getOnlyOnlyKeyword_0_0_0_0() { return cOnlyOnlyKeyword_0_0_0_0; }

		//not?="not"
		public Assignment getNotAssignment_0_0_1() { return cNotAssignment_0_0_1; }

		//"not"
		public Keyword getNotNotKeyword_0_0_1_0() { return cNotNotKeyword_0_0_1_0; }

		//mediaType=IDENT
		public Assignment getMediaTypeAssignment_0_1() { return cMediaTypeAssignment_0_1; }

		//IDENT
		public RuleCall getMediaTypeIDENTTerminalRuleCall_0_1_0() { return cMediaTypeIDENTTerminalRuleCall_0_1_0; }

		//("and" expressions+=MediaQueryExpression)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"and"
		public Keyword getAndKeyword_0_2_0() { return cAndKeyword_0_2_0; }

		//expressions+=MediaQueryExpression
		public Assignment getExpressionsAssignment_0_2_1() { return cExpressionsAssignment_0_2_1; }

		//MediaQueryExpression
		public RuleCall getExpressionsMediaQueryExpressionParserRuleCall_0_2_1_0() { return cExpressionsMediaQueryExpressionParserRuleCall_0_2_1_0; }

		//expressions+=MediaQueryExpression ("and" expressions+=MediaQueryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//expressions+=MediaQueryExpression
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//MediaQueryExpression
		public RuleCall getExpressionsMediaQueryExpressionParserRuleCall_1_0_0() { return cExpressionsMediaQueryExpressionParserRuleCall_1_0_0; }

		//("and" expressions+=MediaQueryExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"and"
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }

		//expressions+=MediaQueryExpression
		public Assignment getExpressionsAssignment_1_1_1() { return cExpressionsAssignment_1_1_1; }

		//MediaQueryExpression
		public RuleCall getExpressionsMediaQueryExpressionParserRuleCall_1_1_1_0() { return cExpressionsMediaQueryExpressionParserRuleCall_1_1_1_0; }
	}

	public class MediaQueryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MediaQueryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureIDENTTerminalRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionValueLiteralParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MediaQueryExpression:
		//	"(" feature=IDENT (":" expression=ValueLiteral)? ")";
		public ParserRule getRule() { return rule; }

		//"(" feature=IDENT (":" expression=ValueLiteral)? ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//feature=IDENT
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//IDENT
		public RuleCall getFeatureIDENTTerminalRuleCall_1_0() { return cFeatureIDENTTerminalRuleCall_1_0; }

		//(":" expression=ValueLiteral)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//expression=ValueLiteral
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//ValueLiteral
		public RuleCall getExpressionValueLiteralParserRuleCall_2_1_0() { return cExpressionValueLiteralParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPseudoPageAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPseudoPageIDENTTerminalRuleCall_1_1_0 = (RuleCall)cPseudoPageAssignment_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyRuleSetBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//PageDeclaration:
		//	"@page" (":" pseudoPage=IDENT)? body=RuleSetBody;
		public ParserRule getRule() { return rule; }

		//"@page" (":" pseudoPage=IDENT)? body=RuleSetBody
		public Group getGroup() { return cGroup; }

		//"@page"
		public Keyword getPageKeyword_0() { return cPageKeyword_0; }

		//(":" pseudoPage=IDENT)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//pseudoPage=IDENT
		public Assignment getPseudoPageAssignment_1_1() { return cPseudoPageAssignment_1_1; }

		//IDENT
		public RuleCall getPseudoPageIDENTTerminalRuleCall_1_1_0() { return cPseudoPageIDENTTerminalRuleCall_1_1_0; }

		//body=RuleSetBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//RuleSetBody
		public RuleCall getBodyRuleSetBodyParserRuleCall_2_0() { return cBodyRuleSetBodyParserRuleCall_2_0; }
	}

	public class NamespaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cUrlAlternatives_2_0 = (Alternatives)cUrlAssignment_2.eContents().get(0);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cUrlAlternatives_2_0.eContents().get(0);
		private final RuleCall cUrlURLTerminalRuleCall_2_0_1 = (RuleCall)cUrlAlternatives_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NamespaceDeclaration:
		//	"@namespace" name=IDENT? url=(STRING | URL) ";";
		public ParserRule getRule() { return rule; }

		//"@namespace" name=IDENT? url=(STRING | URL) ";"
		public Group getGroup() { return cGroup; }

		//"@namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=IDENT?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }

		//url=(STRING | URL)
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }

		//STRING | URL
		public Alternatives getUrlAlternatives_2_0() { return cUrlAlternatives_2_0; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0_0() { return cUrlSTRINGTerminalRuleCall_2_0_0; }

		//URL
		public RuleCall getUrlURLTerminalRuleCall_2_0_1() { return cUrlURLTerminalRuleCall_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FontFaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontFaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontFaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyRuleSetBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//FontFaceDeclaration:
		//	"@font-face" body= // TODO  make this more specific for @font-face
		//	RuleSetBody;
		public ParserRule getRule() { return rule; }

		//"@font-face" body= // TODO  make this more specific for @font-face
		//RuleSetBody
		public Group getGroup() { return cGroup; }

		//"@font-face"
		public Keyword getFontFaceKeyword_0() { return cFontFaceKeyword_0; }

		//body= // TODO  make this more specific for @font-face
		//RuleSetBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//// TODO  make this more specific for @font-face
		//RuleSetBody
		public RuleCall getBodyRuleSetBodyParserRuleCall_1_0() { return cBodyRuleSetBodyParserRuleCall_1_0; }
	}

	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorsSelectorParserRuleCall_0_0 = (RuleCall)cSelectorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectorsSelectorParserRuleCall_1_1_0 = (RuleCall)cSelectorsAssignment_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyRuleSetBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//RuleSet:
		//	selectors+=Selector ("," selectors+=Selector)* // ~ selectors_group
		//	body=RuleSetBody;
		public ParserRule getRule() { return rule; }

		//selectors+=Selector ("," selectors+=Selector)* // ~ selectors_group
		//body=RuleSetBody
		public Group getGroup() { return cGroup; }

		//selectors+=Selector
		public Assignment getSelectorsAssignment_0() { return cSelectorsAssignment_0; }

		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_0_0() { return cSelectorsSelectorParserRuleCall_0_0; }

		//("," selectors+=Selector)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//selectors+=Selector
		public Assignment getSelectorsAssignment_1_1() { return cSelectorsAssignment_1_1; }

		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_1_1_0() { return cSelectorsSelectorParserRuleCall_1_1_0; }

		//body=RuleSetBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//RuleSetBody
		public RuleCall getBodyRuleSetBodyParserRuleCall_2_0() { return cBodyRuleSetBodyParserRuleCall_2_0; }
	}

	public class RuleSetBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleSetBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleSetBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDeclarationsPropertyDeclarationParserRuleCall_2_0_0 = (RuleCall)cDeclarationsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDeclarationsPropertyDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cDeclarationsAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// *
		//	 * Note that this grammar is a little wider than the specification allows,
		//	 * since whitespace following a Selector is hidden.
		//	 * / RuleSetBody:
		//	{RuleSetBody} "{" (declarations+=PropertyDeclaration (";" declarations+=PropertyDeclaration)* ";"?)? "}";
		public ParserRule getRule() { return rule; }

		//{RuleSetBody} "{" (declarations+=PropertyDeclaration (";" declarations+=PropertyDeclaration)* ";"?)? "}"
		public Group getGroup() { return cGroup; }

		//{RuleSetBody}
		public Action getRuleSetBodyAction_0() { return cRuleSetBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(declarations+=PropertyDeclaration (";" declarations+=PropertyDeclaration)* ";"?)?
		public Group getGroup_2() { return cGroup_2; }

		//declarations+=PropertyDeclaration
		public Assignment getDeclarationsAssignment_2_0() { return cDeclarationsAssignment_2_0; }

		//PropertyDeclaration
		public RuleCall getDeclarationsPropertyDeclarationParserRuleCall_2_0_0() { return cDeclarationsPropertyDeclarationParserRuleCall_2_0_0; }

		//(";" declarations+=PropertyDeclaration)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//";"
		public Keyword getSemicolonKeyword_2_1_0() { return cSemicolonKeyword_2_1_0; }

		//declarations+=PropertyDeclaration
		public Assignment getDeclarationsAssignment_2_1_1() { return cDeclarationsAssignment_2_1_1; }

		//PropertyDeclaration
		public RuleCall getDeclarationsPropertyDeclarationParserRuleCall_2_1_1_0() { return cDeclarationsPropertyDeclarationParserRuleCall_2_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKnownPropertyDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnrecognizedPropertyDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		//	 * Note that this grammar is a little wider than the specification allows,
		//	 * since a closing semi-colon is not considered illegal (which it is in the strict sense).
		//	 * / PropertyDeclaration:
		//	KnownPropertyDeclaration | UnrecognizedPropertyDeclaration;
		public ParserRule getRule() { return rule; }

		//KnownPropertyDeclaration | UnrecognizedPropertyDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//KnownPropertyDeclaration
		public RuleCall getKnownPropertyDeclarationParserRuleCall_0() { return cKnownPropertyDeclarationParserRuleCall_0; }

		//UnrecognizedPropertyDeclaration
		public RuleCall getUnrecognizedPropertyDeclarationParserRuleCall_1() { return cUnrecognizedPropertyDeclarationParserRuleCall_1; }
	}

	public class KnownPropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KnownPropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameKnownPropertiesEnumRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesListsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesListsPropertyValuesListsParserRuleCall_2_0 = (RuleCall)cValuesListsAssignment_2.eContents().get(0);
		
		//KnownPropertyDeclaration:
		//	name=KnownProperties ":" valuesLists=PropertyValuesLists;
		public ParserRule getRule() { return rule; }

		//name=KnownProperties ":" valuesLists=PropertyValuesLists
		public Group getGroup() { return cGroup; }

		//name=KnownProperties
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//KnownProperties
		public RuleCall getNameKnownPropertiesEnumRuleCall_0_0() { return cNameKnownPropertiesEnumRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//valuesLists=PropertyValuesLists
		public Assignment getValuesListsAssignment_2() { return cValuesListsAssignment_2; }

		//PropertyValuesLists
		public RuleCall getValuesListsPropertyValuesListsParserRuleCall_2_0() { return cValuesListsPropertyValuesListsParserRuleCall_2_0; }
	}

	public class UnrecognizedPropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnrecognizedPropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePropertyNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesListsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesListsPropertyValuesListsParserRuleCall_2_0 = (RuleCall)cValuesListsAssignment_2.eContents().get(0);
		
		//UnrecognizedPropertyDeclaration:
		//	name=PropertyName ":" valuesLists=PropertyValuesLists;
		public ParserRule getRule() { return rule; }

		//name=PropertyName ":" valuesLists=PropertyValuesLists
		public Group getGroup() { return cGroup; }

		//name=PropertyName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//PropertyName
		public RuleCall getNamePropertyNameParserRuleCall_0_0() { return cNamePropertyNameParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//valuesLists=PropertyValuesLists
		public Assignment getValuesListsAssignment_2() { return cValuesListsAssignment_2; }

		//PropertyValuesLists
		public RuleCall getValuesListsPropertyValuesListsParserRuleCall_2_0() { return cValuesListsPropertyValuesListsParserRuleCall_2_0; }
	}

	public class PropertyNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cEmptyKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAlphaKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//PropertyName:
		//	IDENT | "empty" | // TODO  add other keywords here (possibly through generation)
		//	"alpha";
		public ParserRule getRule() { return rule; }

		//IDENT | "empty" | // TODO  add other keywords here (possibly through generation)
		//"alpha"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }

		//"empty"
		public Keyword getEmptyKeyword_1() { return cEmptyKeyword_1; }

		//// TODO  add other keywords here (possibly through generation)
		//"alpha"
		public Keyword getAlphaKeyword_2() { return cAlphaKeyword_2; }
	}

	public class PropertyValuesListsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValuesLists");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cListsPropertyValuesListParserRuleCall_0_0 = (RuleCall)cListsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cListsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListsPropertyValuesListParserRuleCall_1_1_0 = (RuleCall)cListsAssignment_1_1.eContents().get(0);
		
		//PropertyValuesLists:
		//	lists+=PropertyValuesList ("," lists+=PropertyValuesList)*;
		public ParserRule getRule() { return rule; }

		//lists+=PropertyValuesList ("," lists+=PropertyValuesList)*
		public Group getGroup() { return cGroup; }

		//lists+=PropertyValuesList
		public Assignment getListsAssignment_0() { return cListsAssignment_0; }

		//PropertyValuesList
		public RuleCall getListsPropertyValuesListParserRuleCall_0_0() { return cListsPropertyValuesListParserRuleCall_0_0; }

		//("," lists+=PropertyValuesList)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//lists+=PropertyValuesList
		public Assignment getListsAssignment_1_1() { return cListsAssignment_1_1; }

		//PropertyValuesList
		public RuleCall getListsPropertyValuesListParserRuleCall_1_1_0() { return cListsPropertyValuesListParserRuleCall_1_1_0; }
	}

	public class PropertyValuesListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValuesList");
		private final Assignment cValuesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuesPropertyValueParserRuleCall_0 = (RuleCall)cValuesAssignment.eContents().get(0);
		
		//PropertyValuesList:
		//	values+=PropertyValue+;
		public ParserRule getRule() { return rule; }

		//values+=PropertyValue+
		public Assignment getValuesAssignment() { return cValuesAssignment; }

		//PropertyValue
		public RuleCall getValuesPropertyValueParserRuleCall_0() { return cValuesPropertyValueParserRuleCall_0; }
	}

	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueValueLiteralParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cImportantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cImportantImportantKeyword_1_0 = (Keyword)cImportantAssignment_1.eContents().get(0);
		
		//PropertyValue hidden(WS):
		//	value=ValueLiteral important?="!important"?;
		public ParserRule getRule() { return rule; }

		//value=ValueLiteral important?="!important"?
		public Group getGroup() { return cGroup; }

		//value=ValueLiteral
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//ValueLiteral
		public RuleCall getValueValueLiteralParserRuleCall_0_0() { return cValueValueLiteralParserRuleCall_0_0; }

		//important?="!important"?
		public Assignment getImportantAssignment_1() { return cImportantAssignment_1; }

		//"!important"
		public Keyword getImportantImportantKeyword_1_0() { return cImportantImportantKeyword_1_0; }
	}

	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selector");
		private final RuleCall cCombinatorExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// TODO  generate into this grammar to provide content assist/code completion
		/// *
		// * +-----------+
		// * | Selectors |
		// * +-----------+
		// * 
		// * Specification: http://www.w3.org/TR/css3-selectors
		// * / Selector:
		//	CombinatorExpression;
		public ParserRule getRule() { return rule; }

		//CombinatorExpression
		public RuleCall getCombinatorExpressionParserRuleCall() { return cCombinatorExpressionParserRuleCall; }
	}

	public class CombinatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CombinatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleSelectorSequenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cDescendantCombinatorLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cWsIAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cWsIWSTerminalRuleCall_1_0_1_0 = (RuleCall)cWsIAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightSimpleSelectorSequenceParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cChildCombinatorLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cWsLAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cWsLWSTerminalRuleCall_1_1_1_0 = (RuleCall)cWsLAssignment_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cWsRAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cWsRWSTerminalRuleCall_1_1_3_0 = (RuleCall)cWsRAssignment_1_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cRightSimpleSelectorSequenceParserRuleCall_1_1_4_0 = (RuleCall)cRightAssignment_1_1_4.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cAdjacentSiblingCombinatorLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Assignment cWsLAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cWsLWSTerminalRuleCall_1_2_1_0 = (RuleCall)cWsLAssignment_1_2_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cWsRAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cWsRWSTerminalRuleCall_1_2_3_0 = (RuleCall)cWsRAssignment_1_2_3.eContents().get(0);
		private final Assignment cRightAssignment_1_2_4 = (Assignment)cGroup_1_2.eContents().get(4);
		private final RuleCall cRightSimpleSelectorSequenceParserRuleCall_1_2_4_0 = (RuleCall)cRightAssignment_1_2_4.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cGeneralSiblingCombinatorLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Assignment cWsLAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cWsLWSTerminalRuleCall_1_3_1_0 = (RuleCall)cWsLAssignment_1_3_1.eContents().get(0);
		private final Keyword cTildeKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Assignment cWsRAssignment_1_3_3 = (Assignment)cGroup_1_3.eContents().get(3);
		private final RuleCall cWsRWSTerminalRuleCall_1_3_3_0 = (RuleCall)cWsRAssignment_1_3_3.eContents().get(0);
		private final Assignment cRightAssignment_1_3_4 = (Assignment)cGroup_1_3.eContents().get(4);
		private final RuleCall cRightSimpleSelectorSequenceParserRuleCall_1_3_4_0 = (RuleCall)cRightAssignment_1_3_4.eContents().get(0);
		
		//// TODO  make this a simpler, tail-recursive structure
		//// TODO  add ML_COMMENTS
		//CombinatorExpression returns Selector hidden():
		//	SimpleSelectorSequence ({DescendantCombinator.left=current} wsI=WS right=SimpleSelectorSequence |
		//	{ChildCombinator.left=current} wsL=WS? ">" wsR=WS? right=SimpleSelectorSequence |
		//	{AdjacentSiblingCombinator.left=current} wsL=WS? "+" wsR=WS? right=SimpleSelectorSequence |
		//	{GeneralSiblingCombinator.left=current} wsL=WS? "~" wsR=WS? right=SimpleSelectorSequence)*;
		public ParserRule getRule() { return rule; }

		//SimpleSelectorSequence ({DescendantCombinator.left=current} wsI=WS right=SimpleSelectorSequence |
		//{ChildCombinator.left=current} wsL=WS? ">" wsR=WS? right=SimpleSelectorSequence |
		//{AdjacentSiblingCombinator.left=current} wsL=WS? "+" wsR=WS? right=SimpleSelectorSequence |
		//{GeneralSiblingCombinator.left=current} wsL=WS? "~" wsR=WS? right=SimpleSelectorSequence)*
		public Group getGroup() { return cGroup; }

		//SimpleSelectorSequence
		public RuleCall getSimpleSelectorSequenceParserRuleCall_0() { return cSimpleSelectorSequenceParserRuleCall_0; }

		//({DescendantCombinator.left=current} wsI=WS right=SimpleSelectorSequence | {ChildCombinator.left=current} wsL=WS? ">"
		//wsR=WS? right=SimpleSelectorSequence | {AdjacentSiblingCombinator.left=current} wsL=WS? "+" wsR=WS?
		//right=SimpleSelectorSequence | {GeneralSiblingCombinator.left=current} wsL=WS? "~" wsR=WS?
		//right=SimpleSelectorSequence)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{DescendantCombinator.left=current} wsI=WS right=SimpleSelectorSequence
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{DescendantCombinator.left=current}
		public Action getDescendantCombinatorLeftAction_1_0_0() { return cDescendantCombinatorLeftAction_1_0_0; }

		//wsI=WS
		public Assignment getWsIAssignment_1_0_1() { return cWsIAssignment_1_0_1; }

		//WS
		public RuleCall getWsIWSTerminalRuleCall_1_0_1_0() { return cWsIWSTerminalRuleCall_1_0_1_0; }

		//right=SimpleSelectorSequence
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//SimpleSelectorSequence
		public RuleCall getRightSimpleSelectorSequenceParserRuleCall_1_0_2_0() { return cRightSimpleSelectorSequenceParserRuleCall_1_0_2_0; }

		//{ChildCombinator.left=current} wsL=WS? ">" wsR=WS? right=SimpleSelectorSequence
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{ChildCombinator.left=current}
		public Action getChildCombinatorLeftAction_1_1_0() { return cChildCombinatorLeftAction_1_1_0; }

		//wsL=WS?
		public Assignment getWsLAssignment_1_1_1() { return cWsLAssignment_1_1_1; }

		//WS
		public RuleCall getWsLWSTerminalRuleCall_1_1_1_0() { return cWsLWSTerminalRuleCall_1_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_1_2() { return cGreaterThanSignKeyword_1_1_2; }

		//wsR=WS?
		public Assignment getWsRAssignment_1_1_3() { return cWsRAssignment_1_1_3; }

		//WS
		public RuleCall getWsRWSTerminalRuleCall_1_1_3_0() { return cWsRWSTerminalRuleCall_1_1_3_0; }

		//right=SimpleSelectorSequence
		public Assignment getRightAssignment_1_1_4() { return cRightAssignment_1_1_4; }

		//SimpleSelectorSequence
		public RuleCall getRightSimpleSelectorSequenceParserRuleCall_1_1_4_0() { return cRightSimpleSelectorSequenceParserRuleCall_1_1_4_0; }

		//{AdjacentSiblingCombinator.left=current} wsL=WS? "+" wsR=WS? right=SimpleSelectorSequence
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{AdjacentSiblingCombinator.left=current}
		public Action getAdjacentSiblingCombinatorLeftAction_1_2_0() { return cAdjacentSiblingCombinatorLeftAction_1_2_0; }

		//wsL=WS?
		public Assignment getWsLAssignment_1_2_1() { return cWsLAssignment_1_2_1; }

		//WS
		public RuleCall getWsLWSTerminalRuleCall_1_2_1_0() { return cWsLWSTerminalRuleCall_1_2_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_2_2() { return cPlusSignKeyword_1_2_2; }

		//wsR=WS?
		public Assignment getWsRAssignment_1_2_3() { return cWsRAssignment_1_2_3; }

		//WS
		public RuleCall getWsRWSTerminalRuleCall_1_2_3_0() { return cWsRWSTerminalRuleCall_1_2_3_0; }

		//right=SimpleSelectorSequence
		public Assignment getRightAssignment_1_2_4() { return cRightAssignment_1_2_4; }

		//SimpleSelectorSequence
		public RuleCall getRightSimpleSelectorSequenceParserRuleCall_1_2_4_0() { return cRightSimpleSelectorSequenceParserRuleCall_1_2_4_0; }

		//{GeneralSiblingCombinator.left=current} wsL=WS? "~" wsR=WS? right=SimpleSelectorSequence
		public Group getGroup_1_3() { return cGroup_1_3; }

		//{GeneralSiblingCombinator.left=current}
		public Action getGeneralSiblingCombinatorLeftAction_1_3_0() { return cGeneralSiblingCombinatorLeftAction_1_3_0; }

		//wsL=WS?
		public Assignment getWsLAssignment_1_3_1() { return cWsLAssignment_1_3_1; }

		//WS
		public RuleCall getWsLWSTerminalRuleCall_1_3_1_0() { return cWsLWSTerminalRuleCall_1_3_1_0; }

		//"~"
		public Keyword getTildeKeyword_1_3_2() { return cTildeKeyword_1_3_2; }

		//wsR=WS?
		public Assignment getWsRAssignment_1_3_3() { return cWsRAssignment_1_3_3; }

		//WS
		public RuleCall getWsRWSTerminalRuleCall_1_3_3_0() { return cWsRWSTerminalRuleCall_1_3_3_0; }

		//right=SimpleSelectorSequence
		public Assignment getRightAssignment_1_3_4() { return cRightAssignment_1_3_4; }

		//SimpleSelectorSequence
		public RuleCall getRightSimpleSelectorSequenceParserRuleCall_1_3_4_0() { return cRightSimpleSelectorSequenceParserRuleCall_1_3_4_0; }
	}

	public class SimpleSelectorSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleSelectorSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleSelectorSequenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cHeadAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Alternatives cHeadAlternatives_1_0_0_0 = (Alternatives)cHeadAssignment_1_0_0.eContents().get(0);
		private final RuleCall cHeadTypeSelectorParserRuleCall_1_0_0_0_0 = (RuleCall)cHeadAlternatives_1_0_0_0.eContents().get(0);
		private final RuleCall cHeadUniversalSelectorParserRuleCall_1_0_0_0_1 = (RuleCall)cHeadAlternatives_1_0_0_0.eContents().get(1);
		private final Assignment cSimpleSelectorsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cSimpleSelectorsTailSimpleSelectorParserRuleCall_1_0_1_0 = (RuleCall)cSimpleSelectorsAssignment_1_0_1.eContents().get(0);
		private final Assignment cSimpleSelectorsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cSimpleSelectorsTailSimpleSelectorParserRuleCall_1_1_0 = (RuleCall)cSimpleSelectorsAssignment_1_1.eContents().get(0);
		
		/// *
		//	 * The parse tree from a CombinatorExpression will always yield a linked list
		//	 * (maximally-unbalanced, right-sided tree), but this way it's easier to
		//	 * assign the specific combinator and surrounding whitespace so that the object
		//	 * is re-serializable.
		//	 * / SimpleSelectorSequence returns Selector hidden():
		//	{SimpleSelectorSequence} (head=(TypeSelector | UniversalSelector) simpleSelectors+=TailSimpleSelector* |
		//	simpleSelectors+=TailSimpleSelector+);
		public ParserRule getRule() { return rule; }

		//{SimpleSelectorSequence} (head=(TypeSelector | UniversalSelector) simpleSelectors+=TailSimpleSelector* |
		//simpleSelectors+=TailSimpleSelector+)
		public Group getGroup() { return cGroup; }

		//{SimpleSelectorSequence}
		public Action getSimpleSelectorSequenceAction_0() { return cSimpleSelectorSequenceAction_0; }

		//head=(TypeSelector | UniversalSelector) simpleSelectors+=TailSimpleSelector* | simpleSelectors+=TailSimpleSelector+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//head=(TypeSelector | UniversalSelector) simpleSelectors+=TailSimpleSelector*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//head=(TypeSelector | UniversalSelector)
		public Assignment getHeadAssignment_1_0_0() { return cHeadAssignment_1_0_0; }

		//TypeSelector | UniversalSelector
		public Alternatives getHeadAlternatives_1_0_0_0() { return cHeadAlternatives_1_0_0_0; }

		//TypeSelector
		public RuleCall getHeadTypeSelectorParserRuleCall_1_0_0_0_0() { return cHeadTypeSelectorParserRuleCall_1_0_0_0_0; }

		//UniversalSelector
		public RuleCall getHeadUniversalSelectorParserRuleCall_1_0_0_0_1() { return cHeadUniversalSelectorParserRuleCall_1_0_0_0_1; }

		//simpleSelectors+=TailSimpleSelector*
		public Assignment getSimpleSelectorsAssignment_1_0_1() { return cSimpleSelectorsAssignment_1_0_1; }

		//TailSimpleSelector
		public RuleCall getSimpleSelectorsTailSimpleSelectorParserRuleCall_1_0_1_0() { return cSimpleSelectorsTailSimpleSelectorParserRuleCall_1_0_1_0; }

		//simpleSelectors+=TailSimpleSelector+
		public Assignment getSimpleSelectorsAssignment_1_1() { return cSimpleSelectorsAssignment_1_1; }

		//TailSimpleSelector
		public RuleCall getSimpleSelectorsTailSimpleSelectorParserRuleCall_1_1_0() { return cSimpleSelectorsTailSimpleSelectorParserRuleCall_1_1_0; }
	}

	public class TailSimpleSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TailSimpleSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClassSelectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPseudoSelectorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNegationSelectorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// validation: only last element may be a PseudoElementSelector (sub type of PseudoSelector)
		//// synthetic type to limit choice for parser, without need for validation
		//TailSimpleSelector returns SimpleSelector:
		//	IDSelector | AttributeSelector | ClassSelector | PseudoSelector | NegationSelector;
		public ParserRule getRule() { return rule; }

		//IDSelector | AttributeSelector | ClassSelector | PseudoSelector | NegationSelector
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDSelector
		public RuleCall getIDSelectorParserRuleCall_0() { return cIDSelectorParserRuleCall_0; }

		//AttributeSelector
		public RuleCall getAttributeSelectorParserRuleCall_1() { return cAttributeSelectorParserRuleCall_1; }

		//ClassSelector
		public RuleCall getClassSelectorParserRuleCall_2() { return cClassSelectorParserRuleCall_2; }

		//PseudoSelector
		public RuleCall getPseudoSelectorParserRuleCall_3() { return cPseudoSelectorParserRuleCall_3; }

		//NegationSelector
		public RuleCall getNegationSelectorParserRuleCall_4() { return cNegationSelectorParserRuleCall_4; }
	}

	public class SimpleSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUniversalSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeSelectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIDSelectorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cClassSelectorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPseudoSelectorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNegationSelectorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// convenience super type, also references by Less grammar
		//SimpleSelector:
		//	TypeSelector | UniversalSelector | AttributeSelector | IDSelector | ClassSelector | PseudoSelector | NegationSelector;
		public ParserRule getRule() { return rule; }

		//TypeSelector | UniversalSelector | AttributeSelector | IDSelector | ClassSelector | PseudoSelector | NegationSelector
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeSelector
		public RuleCall getTypeSelectorParserRuleCall_0() { return cTypeSelectorParserRuleCall_0; }

		//UniversalSelector
		public RuleCall getUniversalSelectorParserRuleCall_1() { return cUniversalSelectorParserRuleCall_1; }

		//AttributeSelector
		public RuleCall getAttributeSelectorParserRuleCall_2() { return cAttributeSelectorParserRuleCall_2; }

		//IDSelector
		public RuleCall getIDSelectorParserRuleCall_3() { return cIDSelectorParserRuleCall_3; }

		//ClassSelector
		public RuleCall getClassSelectorParserRuleCall_4() { return cClassSelectorParserRuleCall_4; }

		//PseudoSelector
		public RuleCall getPseudoSelectorParserRuleCall_5() { return cPseudoSelectorParserRuleCall_5; }

		//NegationSelector
		public RuleCall getNegationSelectorParserRuleCall_6() { return cNegationSelectorParserRuleCall_6; }
	}

	public class TypeSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespacePrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespacePrefixNamespacePrefixParserRuleCall_0_0 = (RuleCall)cNamespacePrefixAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDENTTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//TypeSelector:
		//	namespacePrefix=NamespacePrefix? type=IDENT;
		public ParserRule getRule() { return rule; }

		//namespacePrefix=NamespacePrefix? type=IDENT
		public Group getGroup() { return cGroup; }

		//namespacePrefix=NamespacePrefix?
		public Assignment getNamespacePrefixAssignment_0() { return cNamespacePrefixAssignment_0; }

		//NamespacePrefix
		public RuleCall getNamespacePrefixNamespacePrefixParserRuleCall_0_0() { return cNamespacePrefixNamespacePrefixParserRuleCall_0_0; }

		//type=IDENT
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//IDENT
		public RuleCall getTypeIDENTTerminalRuleCall_1_0() { return cTypeIDENTTerminalRuleCall_1_0; }
	}

	public class NamespacePrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespacePrefix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final Action cNamespacePrefixAction_0_0_0_0 = (Action)cGroup_0_0_0.eContents().get(0);
		private final Assignment cNamespaceAssignment_0_0_0_1 = (Assignment)cGroup_0_0_0.eContents().get(1);
		private final CrossReference cNamespaceNamespaceDeclarationCrossReference_0_0_0_1_0 = (CrossReference)cNamespaceAssignment_0_0_0_1.eContents().get(0);
		private final RuleCall cNamespaceNamespaceDeclarationIDENTTerminalRuleCall_0_0_0_1_0_1 = (RuleCall)cNamespaceNamespaceDeclarationCrossReference_0_0_0_1_0.eContents().get(1);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Action cUniversalNamespacePrefixAction_0_0_1_0 = (Action)cGroup_0_0_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_0_1_1 = (Keyword)cGroup_0_0_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cWithoutNamespacePrefixAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//// validation: check (warning) whether type is a known HTML element
		/// *
		//	 * We don't want to know about all HTML elements since each element's name
		//	 * would become a keyword in the language, so we'd have to quote them
		//	 * explicitly at numerous spots.
		//	 * / NamespacePrefix:
		//	({NamespacePrefix} namespace=[NamespaceDeclaration|IDENT] | {UniversalNamespacePrefix} "*") "|" |
		//	{WithoutNamespacePrefix} "|";
		public ParserRule getRule() { return rule; }

		//({NamespacePrefix} namespace=[NamespaceDeclaration|IDENT] | {UniversalNamespacePrefix} "*") "|" |
		//{WithoutNamespacePrefix} "|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//({NamespacePrefix} namespace=[NamespaceDeclaration|IDENT] | {UniversalNamespacePrefix} "*") "|"
		public Group getGroup_0() { return cGroup_0; }

		//{NamespacePrefix} namespace=[NamespaceDeclaration|IDENT] | {UniversalNamespacePrefix} "*"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//{NamespacePrefix} namespace=[NamespaceDeclaration|IDENT]
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//{NamespacePrefix}
		public Action getNamespacePrefixAction_0_0_0_0() { return cNamespacePrefixAction_0_0_0_0; }

		//namespace=[NamespaceDeclaration|IDENT]
		public Assignment getNamespaceAssignment_0_0_0_1() { return cNamespaceAssignment_0_0_0_1; }

		//[NamespaceDeclaration|IDENT]
		public CrossReference getNamespaceNamespaceDeclarationCrossReference_0_0_0_1_0() { return cNamespaceNamespaceDeclarationCrossReference_0_0_0_1_0; }

		//IDENT
		public RuleCall getNamespaceNamespaceDeclarationIDENTTerminalRuleCall_0_0_0_1_0_1() { return cNamespaceNamespaceDeclarationIDENTTerminalRuleCall_0_0_0_1_0_1; }

		//{UniversalNamespacePrefix} "*"
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//{UniversalNamespacePrefix}
		public Action getUniversalNamespacePrefixAction_0_0_1_0() { return cUniversalNamespacePrefixAction_0_0_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_0_1_1() { return cAsteriskKeyword_0_0_1_1; }

		//"|"
		public Keyword getVerticalLineKeyword_0_1() { return cVerticalLineKeyword_0_1; }

		//{WithoutNamespacePrefix} "|"
		public Group getGroup_1() { return cGroup_1; }

		//{WithoutNamespacePrefix}
		public Action getWithoutNamespacePrefixAction_1_0() { return cWithoutNamespacePrefixAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }
	}

	public class UniversalSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UniversalSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUniversalSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNamespacePrefixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamespacePrefixNamespacePrefixParserRuleCall_1_0 = (RuleCall)cNamespacePrefixAssignment_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UniversalSelector:
		//	{UniversalSelector} namespacePrefix=NamespacePrefix? "*";
		public ParserRule getRule() { return rule; }

		//{UniversalSelector} namespacePrefix=NamespacePrefix? "*"
		public Group getGroup() { return cGroup; }

		//{UniversalSelector}
		public Action getUniversalSelectorAction_0() { return cUniversalSelectorAction_0; }

		//namespacePrefix=NamespacePrefix?
		public Assignment getNamespacePrefixAssignment_1() { return cNamespacePrefixAssignment_1; }

		//NamespacePrefix
		public RuleCall getNamespacePrefixNamespacePrefixParserRuleCall_1_0() { return cNamespacePrefixNamespacePrefixParserRuleCall_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}

	public class AttributeSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeAttributeParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMatcherAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMatcherAttributeSelectorMatchersEnumRuleCall_2_0_0 = (RuleCall)cMatcherAssignment_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueAttributeValueLiteralParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttributeSelector hidden(WS):
		//	"[" attribute=Attribute (matcher=AttributeSelectorMatchers value=AttributeValueLiteral)? // !matcher.eIsSet means: AttributePresenceSelector
		//	"]";
		public ParserRule getRule() { return rule; }

		//"[" attribute=Attribute (matcher=AttributeSelectorMatchers value=AttributeValueLiteral)? // !matcher.eIsSet means: AttributePresenceSelector
		//"]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//attribute=Attribute
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_1_0() { return cAttributeAttributeParserRuleCall_1_0; }

		//(matcher=AttributeSelectorMatchers value=AttributeValueLiteral)?
		public Group getGroup_2() { return cGroup_2; }

		//matcher=AttributeSelectorMatchers
		public Assignment getMatcherAssignment_2_0() { return cMatcherAssignment_2_0; }

		//AttributeSelectorMatchers
		public RuleCall getMatcherAttributeSelectorMatchersEnumRuleCall_2_0_0() { return cMatcherAttributeSelectorMatchersEnumRuleCall_2_0_0; }

		//value=AttributeValueLiteral
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//AttributeValueLiteral
		public RuleCall getValueAttributeValueLiteralParserRuleCall_2_1_0() { return cValueAttributeValueLiteralParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespacePrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespacePrefixNamespacePrefixParserRuleCall_0_0 = (RuleCall)cNamespacePrefixAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// TODO  try to find a solution which has better hierarchy (e.g., AttributeValueSelector and AttributePresenceSelector)
		//Attribute hidden():
		//	namespacePrefix=NamespacePrefix? name=IDENT;
		public ParserRule getRule() { return rule; }

		//namespacePrefix=NamespacePrefix? name=IDENT
		public Group getGroup() { return cGroup; }

		//namespacePrefix=NamespacePrefix?
		public Assignment getNamespacePrefixAssignment_0() { return cNamespacePrefixAssignment_0; }

		//NamespacePrefix
		public RuleCall getNamespacePrefixNamespacePrefixParserRuleCall_0_0() { return cNamespacePrefixNamespacePrefixParserRuleCall_0_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }
	}

	public class AttributeValueLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeValueLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringAttributeValueLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cValueAlternatives_0_1_0 = (Alternatives)cValueAssignment_0_1.eContents().get(0);
		private final RuleCall cValueIDENTTerminalRuleCall_0_1_0_0 = (RuleCall)cValueAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0_1 = (RuleCall)cValueAlternatives_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntegerAttributeValueLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDecimalAttributeValueLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueDECIMALTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//AttributeValueLiteral:
		//	{StringAttributeValueLiteral} value=(IDENT | STRING) | {IntegerAttributeValueLiteral} value=INT |
		//	{DecimalAttributeValueLiteral} value=DECIMAL;
		public ParserRule getRule() { return rule; }

		//{StringAttributeValueLiteral} value=(IDENT | STRING) | {IntegerAttributeValueLiteral} value=INT |
		//{DecimalAttributeValueLiteral} value=DECIMAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//{StringAttributeValueLiteral} value=(IDENT | STRING)
		public Group getGroup_0() { return cGroup_0; }

		//{StringAttributeValueLiteral}
		public Action getStringAttributeValueLiteralAction_0_0() { return cStringAttributeValueLiteralAction_0_0; }

		//value=(IDENT | STRING)
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//IDENT | STRING
		public Alternatives getValueAlternatives_0_1_0() { return cValueAlternatives_0_1_0; }

		//IDENT
		public RuleCall getValueIDENTTerminalRuleCall_0_1_0_0() { return cValueIDENTTerminalRuleCall_0_1_0_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0_1() { return cValueSTRINGTerminalRuleCall_0_1_0_1; }

		//{IntegerAttributeValueLiteral} value=INT
		public Group getGroup_1() { return cGroup_1; }

		//{IntegerAttributeValueLiteral}
		public Action getIntegerAttributeValueLiteralAction_1_0() { return cIntegerAttributeValueLiteralAction_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }

		//{DecimalAttributeValueLiteral} value=DECIMAL
		public Group getGroup_2() { return cGroup_2; }

		//{DecimalAttributeValueLiteral}
		public Action getDecimalAttributeValueLiteralAction_2_0() { return cDecimalAttributeValueLiteralAction_2_0; }

		//value=DECIMAL
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_2_1_0() { return cValueDECIMALTerminalRuleCall_2_1_0; }
	}

	public class IDSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDSelector");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameHASH_IDTerminalRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameHEX_COLORTerminalRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		
		//// TODO  check whether this complies with CSS def.!
		//IDSelector:
		//	name=(HASH_ID // RGB_COLOR has priority but is otherwise subsumed by HASH_ID
		//	| HEX_COLOR);
		public ParserRule getRule() { return rule; }

		//name=(HASH_ID // RGB_COLOR has priority but is otherwise subsumed by HASH_ID
		//| HEX_COLOR)
		public Assignment getNameAssignment() { return cNameAssignment; }

		//HASH_ID // RGB_COLOR has priority but is otherwise subsumed by HASH_ID
		//| HEX_COLOR
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//HASH_ID
		public RuleCall getNameHASH_IDTerminalRuleCall_0_0() { return cNameHASH_IDTerminalRuleCall_0_0; }

		//HEX_COLOR
		public RuleCall getNameHEX_COLORTerminalRuleCall_0_1() { return cNameHEX_COLORTerminalRuleCall_0_1; }
	}

	public class ClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassSelector");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameDOT_IDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ClassSelector:
		//	name=DOT_ID;
		public ParserRule getRule() { return rule; }

		//name=DOT_ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_0() { return cNameDOT_IDTerminalRuleCall_0; }
	}

	public class PseudoSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PseudoSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNoArgsPseudoClassSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPseudoElementSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLanguagePseudoClassSelectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionalPseudoClassSelectorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PseudoSelector:
		//	NoArgsPseudoClassSelector | PseudoElementSelector | LanguagePseudoClassSelector | FunctionalPseudoClassSelector;
		public ParserRule getRule() { return rule; }

		//NoArgsPseudoClassSelector | PseudoElementSelector | LanguagePseudoClassSelector | FunctionalPseudoClassSelector
		public Alternatives getAlternatives() { return cAlternatives; }

		//NoArgsPseudoClassSelector
		public RuleCall getNoArgsPseudoClassSelectorParserRuleCall_0() { return cNoArgsPseudoClassSelectorParserRuleCall_0; }

		//PseudoElementSelector
		public RuleCall getPseudoElementSelectorParserRuleCall_1() { return cPseudoElementSelectorParserRuleCall_1; }

		//LanguagePseudoClassSelector
		public RuleCall getLanguagePseudoClassSelectorParserRuleCall_2() { return cLanguagePseudoClassSelectorParserRuleCall_2; }

		//FunctionalPseudoClassSelector
		public RuleCall getFunctionalPseudoClassSelectorParserRuleCall_3() { return cFunctionalPseudoClassSelectorParserRuleCall_3; }
	}

	public class NoArgsPseudoClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoArgsPseudoClassSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPseudoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPseudoNoArgsPseudosEnumRuleCall_1_0 = (RuleCall)cPseudoAssignment_1.eContents().get(0);
		
		//NoArgsPseudoClassSelector hidden():
		//	":" pseudo=NoArgsPseudos;
		public ParserRule getRule() { return rule; }

		//":" pseudo=NoArgsPseudos
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//pseudo=NoArgsPseudos
		public Assignment getPseudoAssignment_1() { return cPseudoAssignment_1; }

		//NoArgsPseudos
		public RuleCall getPseudoNoArgsPseudosEnumRuleCall_1_0() { return cPseudoNoArgsPseudosEnumRuleCall_1_0; }
	}

	public class PseudoElementSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PseudoElementSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDoubleSemiColonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDoubleSemiColonColonKeyword_1_0 = (Keyword)cDoubleSemiColonAssignment_1.eContents().get(0);
		private final Assignment cPseudoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPseudoPseudoElementsEnumRuleCall_2_0 = (RuleCall)cPseudoAssignment_2.eContents().get(0);
		
		//PseudoElementSelector hidden():
		//	":" doubleSemiColon?=":"? pseudo=PseudoElements;
		public ParserRule getRule() { return rule; }

		//":" doubleSemiColon?=":"? pseudo=PseudoElements
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//doubleSemiColon?=":"?
		public Assignment getDoubleSemiColonAssignment_1() { return cDoubleSemiColonAssignment_1; }

		//":"
		public Keyword getDoubleSemiColonColonKeyword_1_0() { return cDoubleSemiColonColonKeyword_1_0; }

		//pseudo=PseudoElements
		public Assignment getPseudoAssignment_2() { return cPseudoAssignment_2; }

		//PseudoElements
		public RuleCall getPseudoPseudoElementsEnumRuleCall_2_0() { return cPseudoPseudoElementsEnumRuleCall_2_0; }
	}

	public class LanguagePseudoClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LanguagePseudoClassSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLangKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLangugageIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLangugageIdIDENTTerminalRuleCall_3_0 = (RuleCall)cLangugageIdAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// validation: warning if "legacy" pseudo-element is used with only a single semi-colon
		//LanguagePseudoClassSelector hidden():
		//	":" "lang" "(" langugageId=IDENT ")";
		public ParserRule getRule() { return rule; }

		//":" "lang" "(" langugageId=IDENT ")"
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//"lang"
		public Keyword getLangKeyword_1() { return cLangKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//langugageId=IDENT
		public Assignment getLangugageIdAssignment_3() { return cLangugageIdAssignment_3; }

		//IDENT
		public RuleCall getLangugageIdIDENTTerminalRuleCall_3_0() { return cLangugageIdIDENTTerminalRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class FunctionalPseudoClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionalPseudoClassSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPseudoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPseudoFunctionalPseudoClassesEnumRuleCall_1_0 = (RuleCall)cPseudoAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentTypeArgumentParserRuleCall_3_0 = (RuleCall)cArgumentAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// validation: language matches /\w+(-\w+)?/
		//FunctionalPseudoClassSelector hidden():
		//	":" pseudo=FunctionalPseudoClasses "(" argument=TypeArgument ")";
		public ParserRule getRule() { return rule; }

		//":" pseudo=FunctionalPseudoClasses "(" argument=TypeArgument ")"
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//pseudo=FunctionalPseudoClasses
		public Assignment getPseudoAssignment_1() { return cPseudoAssignment_1; }

		//FunctionalPseudoClasses
		public RuleCall getPseudoFunctionalPseudoClassesEnumRuleCall_1_0() { return cPseudoFunctionalPseudoClassesEnumRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//argument=TypeArgument
		public Assignment getArgumentAssignment_3() { return cArgumentAssignment_3; }

		//TypeArgument
		public RuleCall getArgumentTypeArgumentParserRuleCall_3_0() { return cArgumentTypeArgumentParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class TypeArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParityArgumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinearArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantArgumentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////	| {TokensArgument} token=IDENT ('+')
		//TypeArgument hidden(WS):
		//	ParityArgument | LinearArgument | ConstantArgument;
		public ParserRule getRule() { return rule; }

		//ParityArgument | LinearArgument | ConstantArgument
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParityArgument
		public RuleCall getParityArgumentParserRuleCall_0() { return cParityArgumentParserRuleCall_0; }

		//LinearArgument
		public RuleCall getLinearArgumentParserRuleCall_1() { return cLinearArgumentParserRuleCall_1; }

		//ConstantArgument
		public RuleCall getConstantArgumentParserRuleCall_2() { return cConstantArgumentParserRuleCall_2; }
	}

	public class LinearArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinearArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinearArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCoefficientAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCoefficientCoefficientParserRuleCall_1_0 = (RuleCall)cCoefficientAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cConstantSignAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cConstantSignAlternatives_2_0_0 = (Alternatives)cConstantSignAssignment_2_0.eContents().get(0);
		private final Keyword cConstantSignHyphenMinusKeyword_2_0_0_0 = (Keyword)cConstantSignAlternatives_2_0_0.eContents().get(0);
		private final Keyword cConstantSignPlusSignKeyword_2_0_0_1 = (Keyword)cConstantSignAlternatives_2_0_0.eContents().get(1);
		private final Assignment cConstantAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstantINTTerminalRuleCall_2_1_0 = (RuleCall)cConstantAssignment_2_1.eContents().get(0);
		
		//LinearArgument hidden(WS):
		//	{LinearArgument} coefficient=Coefficient (constantSign=("-" | "+")? constant=INT)?;
		public ParserRule getRule() { return rule; }

		//{LinearArgument} coefficient=Coefficient (constantSign=("-" | "+")? constant=INT)?
		public Group getGroup() { return cGroup; }

		//{LinearArgument}
		public Action getLinearArgumentAction_0() { return cLinearArgumentAction_0; }

		//coefficient=Coefficient
		public Assignment getCoefficientAssignment_1() { return cCoefficientAssignment_1; }

		//Coefficient
		public RuleCall getCoefficientCoefficientParserRuleCall_1_0() { return cCoefficientCoefficientParserRuleCall_1_0; }

		//(constantSign=("-" | "+")? constant=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//constantSign=("-" | "+")?
		public Assignment getConstantSignAssignment_2_0() { return cConstantSignAssignment_2_0; }

		//"-" | "+"
		public Alternatives getConstantSignAlternatives_2_0_0() { return cConstantSignAlternatives_2_0_0; }

		//"-"
		public Keyword getConstantSignHyphenMinusKeyword_2_0_0_0() { return cConstantSignHyphenMinusKeyword_2_0_0_0; }

		//"+"
		public Keyword getConstantSignPlusSignKeyword_2_0_0_1() { return cConstantSignPlusSignKeyword_2_0_0_1; }

		//constant=INT
		public Assignment getConstantAssignment_2_1() { return cConstantAssignment_2_1; }

		//INT
		public RuleCall getConstantINTTerminalRuleCall_2_1_0() { return cConstantINTTerminalRuleCall_2_1_0; }
	}

	public class CoefficientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Coefficient");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCoefficientAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cIntAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_1_1_0 = (RuleCall)cIntAssignment_1_1.eContents().get(0);
		private final Keyword cNKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//// separate rule to control whitespace
		//Coefficient hidden():
		//	ident=IDENT | {Coefficient} int=INT? "n";
		public ParserRule getRule() { return rule; }

		//ident=IDENT | {Coefficient} int=INT? "n"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//{Coefficient} int=INT? "n"
		public Group getGroup_1() { return cGroup_1; }

		//{Coefficient}
		public Action getCoefficientAction_1_0() { return cCoefficientAction_1_0; }

		//int=INT?
		public Assignment getIntAssignment_1_1() { return cIntAssignment_1_1; }

		//INT
		public RuleCall getIntINTTerminalRuleCall_1_1_0() { return cIntINTTerminalRuleCall_1_1_0; }

		//"n"
		public Keyword getNKeyword_1_2() { return cNKeyword_1_2; }
	}

	public class ConstantArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSignAlternatives_0_0 = (Alternatives)cSignAssignment_0.eContents().get(0);
		private final Keyword cSignHyphenMinusKeyword_0_0_0 = (Keyword)cSignAlternatives_0_0.eContents().get(0);
		private final Keyword cSignPlusSignKeyword_0_0_1 = (Keyword)cSignAlternatives_0_0.eContents().get(1);
		private final Assignment cIntAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_1_0 = (RuleCall)cIntAssignment_1.eContents().get(0);
		
		//// TODO  validation on ident
		//// separate rule to control whitespace
		//ConstantArgument hidden():
		//	sign=("-" | "+")? int=INT;
		public ParserRule getRule() { return rule; }

		//sign=("-" | "+")? int=INT
		public Group getGroup() { return cGroup; }

		//sign=("-" | "+")?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }

		//"-" | "+"
		public Alternatives getSignAlternatives_0_0() { return cSignAlternatives_0_0; }

		//"-"
		public Keyword getSignHyphenMinusKeyword_0_0_0() { return cSignHyphenMinusKeyword_0_0_0; }

		//"+"
		public Keyword getSignPlusSignKeyword_0_0_1() { return cSignPlusSignKeyword_0_0_1; }

		//int=INT
		public Assignment getIntAssignment_1() { return cIntAssignment_1; }

		//INT
		public RuleCall getIntINTTerminalRuleCall_1_0() { return cIntINTTerminalRuleCall_1_0; }
	}

	public class ParityArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParityArgument");
		private final Assignment cParityAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParityParitiesEnumRuleCall_0 = (RuleCall)cParityAssignment.eContents().get(0);
		
		//ParityArgument:
		//	parity=Parities;
		public ParserRule getRule() { return rule; }

		//parity=Parities
		public Assignment getParityAssignment() { return cParityAssignment; }

		//Parities
		public RuleCall getParityParitiesEnumRuleCall_0() { return cParityParitiesEnumRuleCall_0; }
	}

	public class NegationSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegationSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSimpleSelectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSimpleSelectorNegationSimpleSelectorParserRuleCall_2_0 = (RuleCall)cSimpleSelectorAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NegationSelector hidden():
		//	":" "not(" simpleSelector=NegationSimpleSelector ")";
		public ParserRule getRule() { return rule; }

		//":" "not(" simpleSelector=NegationSimpleSelector ")"
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//"not("
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }

		//simpleSelector=NegationSimpleSelector
		public Assignment getSimpleSelectorAssignment_2() { return cSimpleSelectorAssignment_2; }

		//NegationSimpleSelector
		public RuleCall getSimpleSelectorNegationSimpleSelectorParserRuleCall_2_0() { return cSimpleSelectorNegationSimpleSelectorParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class NegationSimpleSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegationSimpleSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUniversalSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeSelectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIDSelectorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cClassSelectorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPseudoSelectorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// synthetic type to limit choice for parser, without need for validation
		//NegationSimpleSelector returns SimpleSelector:
		//	TypeSelector | UniversalSelector | AttributeSelector | IDSelector | ClassSelector | PseudoSelector;
		public ParserRule getRule() { return rule; }

		//TypeSelector | UniversalSelector | AttributeSelector | IDSelector | ClassSelector | PseudoSelector
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeSelector
		public RuleCall getTypeSelectorParserRuleCall_0() { return cTypeSelectorParserRuleCall_0; }

		//UniversalSelector
		public RuleCall getUniversalSelectorParserRuleCall_1() { return cUniversalSelectorParserRuleCall_1; }

		//AttributeSelector
		public RuleCall getAttributeSelectorParserRuleCall_2() { return cAttributeSelectorParserRuleCall_2; }

		//IDSelector
		public RuleCall getIDSelectorParserRuleCall_3() { return cIDSelectorParserRuleCall_3; }

		//ClassSelector
		public RuleCall getClassSelectorParserRuleCall_4() { return cClassSelectorParserRuleCall_4; }

		//PseudoSelector
		public RuleCall getPseudoSelectorParserRuleCall_5() { return cPseudoSelectorParserRuleCall_5; }
	}

	public class ValueLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSizeLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColorLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cURLLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionCallLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/// *
		// * +---------------------+
		// * | CSS property values |
		// * +---------------------+
		// * / // TODO  transform this into another expression sub language to deal with all the peculiarities (e.g. concatenation of bare words has higher precedence than juxtaposition with commas?)
		//ValueLiteral:
		//	SizeLiteral | StringLiteral | ColorLiteral | URLLiteral | // | BareWordLiteral
		//	FunctionCallLiteral;
		public ParserRule getRule() { return rule; }

		//SizeLiteral | StringLiteral | ColorLiteral | URLLiteral | // | BareWordLiteral
		//FunctionCallLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//SizeLiteral
		public RuleCall getSizeLiteralParserRuleCall_0() { return cSizeLiteralParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }

		//ColorLiteral
		public RuleCall getColorLiteralParserRuleCall_2() { return cColorLiteralParserRuleCall_2; }

		//URLLiteral
		public RuleCall getURLLiteralParserRuleCall_3() { return cURLLiteralParserRuleCall_3; }

		//// | BareWordLiteral
		//FunctionCallLiteral
		public RuleCall getFunctionCallLiteralParserRuleCall_4() { return cFunctionCallLiteralParserRuleCall_4; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntegerLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIntAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_0_1_0 = (RuleCall)cIntAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDecimalLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cDecimalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDecimalDECIMALTerminalRuleCall_1_1_0 = (RuleCall)cDecimalAssignment_1_1.eContents().get(0);
		
		//NumberLiteral:
		//	{IntegerLiteral} int=INT | {DecimalLiteral} decimal=DECIMAL;
		public ParserRule getRule() { return rule; }

		//{IntegerLiteral} int=INT | {DecimalLiteral} decimal=DECIMAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntegerLiteral} int=INT
		public Group getGroup_0() { return cGroup_0; }

		//{IntegerLiteral}
		public Action getIntegerLiteralAction_0_0() { return cIntegerLiteralAction_0_0; }

		//int=INT
		public Assignment getIntAssignment_0_1() { return cIntAssignment_0_1; }

		//INT
		public RuleCall getIntINTTerminalRuleCall_0_1_0() { return cIntINTTerminalRuleCall_0_1_0; }

		//{DecimalLiteral} decimal=DECIMAL
		public Group getGroup_1() { return cGroup_1; }

		//{DecimalLiteral}
		public Action getDecimalLiteralAction_1_0() { return cDecimalLiteralAction_1_0; }

		//decimal=DECIMAL
		public Assignment getDecimalAssignment_1_1() { return cDecimalAssignment_1_1; }

		//DECIMAL
		public RuleCall getDecimalDECIMALTerminalRuleCall_1_1_0() { return cDecimalDECIMALTerminalRuleCall_1_1_0; }
	}

	public class SizeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SizeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cQuantifiedSizeLiteralAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cNumberAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cNumberNumberLiteralParserRuleCall_0_0_1_0 = (RuleCall)cNumberAssignment_0_0_1.eContents().get(0);
		private final Assignment cDimensionAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cDimensionDimensionsEnumRuleCall_0_0_2_0 = (RuleCall)cDimensionAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cQualifiedSizeLiteralAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cBarewordAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cBarewordIDENTTerminalRuleCall_0_1_1_0 = (RuleCall)cBarewordAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cFontHeightLiteralFontHeightAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cLineHeightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLineHeightNumberLiteralParserRuleCall_1_2_0 = (RuleCall)cLineHeightAssignment_1_2.eContents().get(0);
		private final Assignment cLineHeightDimensionAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cLineHeightDimensionDimensionsEnumRuleCall_1_3_0 = (RuleCall)cLineHeightDimensionAssignment_1_3.eContents().get(0);
		
		//SizeLiteral hidden():
		//	({QuantifiedSizeLiteral} number=NumberLiteral dimension=Dimensions? | {QualifiedSizeLiteral} bareword=IDENT) ("/"
		//	{FontHeightLiteral.fontHeight=current} lineHeight=NumberLiteral lineHeightDimension=Dimensions?)?;
		public ParserRule getRule() { return rule; }

		//({QuantifiedSizeLiteral} number=NumberLiteral dimension=Dimensions? | {QualifiedSizeLiteral} bareword=IDENT) ("/"
		//{FontHeightLiteral.fontHeight=current} lineHeight=NumberLiteral lineHeightDimension=Dimensions?)?
		public Group getGroup() { return cGroup; }

		//{QuantifiedSizeLiteral} number=NumberLiteral dimension=Dimensions? | {QualifiedSizeLiteral} bareword=IDENT
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//{QuantifiedSizeLiteral} number=NumberLiteral dimension=Dimensions?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{QuantifiedSizeLiteral}
		public Action getQuantifiedSizeLiteralAction_0_0_0() { return cQuantifiedSizeLiteralAction_0_0_0; }

		//number=NumberLiteral
		public Assignment getNumberAssignment_0_0_1() { return cNumberAssignment_0_0_1; }

		//NumberLiteral
		public RuleCall getNumberNumberLiteralParserRuleCall_0_0_1_0() { return cNumberNumberLiteralParserRuleCall_0_0_1_0; }

		//dimension=Dimensions?
		public Assignment getDimensionAssignment_0_0_2() { return cDimensionAssignment_0_0_2; }

		//Dimensions
		public RuleCall getDimensionDimensionsEnumRuleCall_0_0_2_0() { return cDimensionDimensionsEnumRuleCall_0_0_2_0; }

		//{QualifiedSizeLiteral} bareword=IDENT
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{QualifiedSizeLiteral}
		public Action getQualifiedSizeLiteralAction_0_1_0() { return cQualifiedSizeLiteralAction_0_1_0; }

		//bareword=IDENT
		public Assignment getBarewordAssignment_0_1_1() { return cBarewordAssignment_0_1_1; }

		//IDENT
		public RuleCall getBarewordIDENTTerminalRuleCall_0_1_1_0() { return cBarewordIDENTTerminalRuleCall_0_1_1_0; }

		//("/" {FontHeightLiteral.fontHeight=current} lineHeight=NumberLiteral lineHeightDimension=Dimensions?)?
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//{FontHeightLiteral.fontHeight=current}
		public Action getFontHeightLiteralFontHeightAction_1_1() { return cFontHeightLiteralFontHeightAction_1_1; }

		//lineHeight=NumberLiteral
		public Assignment getLineHeightAssignment_1_2() { return cLineHeightAssignment_1_2; }

		//NumberLiteral
		public RuleCall getLineHeightNumberLiteralParserRuleCall_1_2_0() { return cLineHeightNumberLiteralParserRuleCall_1_2_0; }

		//lineHeightDimension=Dimensions?
		public Assignment getLineHeightDimensionAssignment_1_3() { return cLineHeightDimensionAssignment_1_3; }

		//Dimensions
		public RuleCall getLineHeightDimensionDimensionsEnumRuleCall_1_3_0() { return cLineHeightDimensionDimensionsEnumRuleCall_1_3_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class ColorLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRGBColorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cRgbAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRgbHEX_COLORTerminalRuleCall_0_1_0 = (RuleCall)cRgbAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNamedColorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cColorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColorColorNamesEnumRuleCall_1_1_0 = (RuleCall)cColorAssignment_1_1.eContents().get(0);
		private final RuleCall cComponentColorLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ColorLiteral:
		//	{RGBColor} rgb=HEX_COLOR | {NamedColor} color=ColorNames | ComponentColorLiteral;
		public ParserRule getRule() { return rule; }

		//{RGBColor} rgb=HEX_COLOR | {NamedColor} color=ColorNames | ComponentColorLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//{RGBColor} rgb=HEX_COLOR
		public Group getGroup_0() { return cGroup_0; }

		//{RGBColor}
		public Action getRGBColorAction_0_0() { return cRGBColorAction_0_0; }

		//rgb=HEX_COLOR
		public Assignment getRgbAssignment_0_1() { return cRgbAssignment_0_1; }

		//HEX_COLOR
		public RuleCall getRgbHEX_COLORTerminalRuleCall_0_1_0() { return cRgbHEX_COLORTerminalRuleCall_0_1_0; }

		//{NamedColor} color=ColorNames
		public Group getGroup_1() { return cGroup_1; }

		//{NamedColor}
		public Action getNamedColorAction_1_0() { return cNamedColorAction_1_0; }

		//color=ColorNames
		public Assignment getColorAssignment_1_1() { return cColorAssignment_1_1; }

		//ColorNames
		public RuleCall getColorColorNamesEnumRuleCall_1_1_0() { return cColorColorNamesEnumRuleCall_1_1_0; }

		//ComponentColorLiteral
		public RuleCall getComponentColorLiteralParserRuleCall_2() { return cComponentColorLiteralParserRuleCall_2; }
	}

	public class ComponentColorLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentColorLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cComponentRGBColorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cRgbKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRedAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRedColorComponentLiteralParserRuleCall_0_3_0 = (RuleCall)cRedAssignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cGreenAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cGreenColorComponentLiteralParserRuleCall_0_5_0 = (RuleCall)cGreenAssignment_0_5.eContents().get(0);
		private final Keyword cCommaKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cBlueAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cBlueColorComponentLiteralParserRuleCall_0_7_0 = (RuleCall)cBlueAssignment_0_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cComponentRGBAlphaColorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cRgbaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRedAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRedColorComponentLiteralParserRuleCall_1_3_0 = (RuleCall)cRedAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cGreenAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cGreenColorComponentLiteralParserRuleCall_1_5_0 = (RuleCall)cGreenAssignment_1_5.eContents().get(0);
		private final Keyword cCommaKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cBlueAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cBlueColorComponentLiteralParserRuleCall_1_7_0 = (RuleCall)cBlueAssignment_1_7.eContents().get(0);
		private final Keyword cCommaKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Assignment cOpacityAssignment_1_9 = (Assignment)cGroup_1.eContents().get(9);
		private final RuleCall cOpacityColorComponentLiteralParserRuleCall_1_9_0 = (RuleCall)cOpacityAssignment_1_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_10 = (Keyword)cGroup_1.eContents().get(10);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cComponentHSLColorAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHslKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cHueAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cHueColorComponentLiteralParserRuleCall_2_3_0 = (RuleCall)cHueAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cSaturationAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cSaturationColorComponentLiteralParserRuleCall_2_5_0 = (RuleCall)cSaturationAssignment_2_5.eContents().get(0);
		private final Keyword cCommaKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Assignment cLightnessAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final RuleCall cLightnessColorComponentLiteralParserRuleCall_2_7_0 = (RuleCall)cLightnessAssignment_2_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cComponentHSLAlphaColorAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cHslaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cHueAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cHueColorComponentLiteralParserRuleCall_3_3_0 = (RuleCall)cHueAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cSaturationAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cSaturationColorComponentLiteralParserRuleCall_3_5_0 = (RuleCall)cSaturationAssignment_3_5.eContents().get(0);
		private final Keyword cCommaKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cLightnessAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final RuleCall cLightnessColorComponentLiteralParserRuleCall_3_7_0 = (RuleCall)cLightnessAssignment_3_7.eContents().get(0);
		private final Keyword cCommaKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Assignment cOpacityAssignment_3_9 = (Assignment)cGroup_3.eContents().get(9);
		private final RuleCall cOpacityColorComponentLiteralParserRuleCall_3_9_0 = (RuleCall)cOpacityAssignment_3_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_10 = (Keyword)cGroup_3.eContents().get(10);
		
		//ComponentColorLiteral:
		//	{ComponentRGBColor} "rgb" "(" red=ColorComponentLiteral "," green=ColorComponentLiteral "," blue=ColorComponentLiteral
		//	")" | {ComponentRGBAlphaColor} "rgba" "(" red=ColorComponentLiteral "," green=ColorComponentLiteral ","
		//	blue=ColorComponentLiteral "," opacity=ColorComponentLiteral ")" | {ComponentHSLColor} "hsl" "("
		//	hue=ColorComponentLiteral "," saturation=ColorComponentLiteral "," lightness=ColorComponentLiteral ")" |
		//	{ComponentHSLAlphaColor} "hsla" "(" hue=ColorComponentLiteral "," saturation=ColorComponentLiteral ","
		//	lightness=ColorComponentLiteral "," opacity=ColorComponentLiteral ")";
		public ParserRule getRule() { return rule; }

		//{ComponentRGBColor} "rgb" "(" red=ColorComponentLiteral "," green=ColorComponentLiteral "," blue=ColorComponentLiteral
		//")" | {ComponentRGBAlphaColor} "rgba" "(" red=ColorComponentLiteral "," green=ColorComponentLiteral ","
		//blue=ColorComponentLiteral "," opacity=ColorComponentLiteral ")" | {ComponentHSLColor} "hsl" "("
		//hue=ColorComponentLiteral "," saturation=ColorComponentLiteral "," lightness=ColorComponentLiteral ")" |
		//{ComponentHSLAlphaColor} "hsla" "(" hue=ColorComponentLiteral "," saturation=ColorComponentLiteral ","
		//lightness=ColorComponentLiteral "," opacity=ColorComponentLiteral ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ComponentRGBColor} "rgb" "(" red=ColorComponentLiteral "," green=ColorComponentLiteral "," blue=ColorComponentLiteral
		//")"
		public Group getGroup_0() { return cGroup_0; }

		//{ComponentRGBColor}
		public Action getComponentRGBColorAction_0_0() { return cComponentRGBColorAction_0_0; }

		//"rgb"
		public Keyword getRgbKeyword_0_1() { return cRgbKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//red=ColorComponentLiteral
		public Assignment getRedAssignment_0_3() { return cRedAssignment_0_3; }

		//ColorComponentLiteral
		public RuleCall getRedColorComponentLiteralParserRuleCall_0_3_0() { return cRedColorComponentLiteralParserRuleCall_0_3_0; }

		//","
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }

		//green=ColorComponentLiteral
		public Assignment getGreenAssignment_0_5() { return cGreenAssignment_0_5; }

		//ColorComponentLiteral
		public RuleCall getGreenColorComponentLiteralParserRuleCall_0_5_0() { return cGreenColorComponentLiteralParserRuleCall_0_5_0; }

		//","
		public Keyword getCommaKeyword_0_6() { return cCommaKeyword_0_6; }

		//blue=ColorComponentLiteral
		public Assignment getBlueAssignment_0_7() { return cBlueAssignment_0_7; }

		//ColorComponentLiteral
		public RuleCall getBlueColorComponentLiteralParserRuleCall_0_7_0() { return cBlueColorComponentLiteralParserRuleCall_0_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_8() { return cRightParenthesisKeyword_0_8; }

		//{ComponentRGBAlphaColor} "rgba" "(" red=ColorComponentLiteral "," green=ColorComponentLiteral ","
		//blue=ColorComponentLiteral "," opacity=ColorComponentLiteral ")"
		public Group getGroup_1() { return cGroup_1; }

		//{ComponentRGBAlphaColor}
		public Action getComponentRGBAlphaColorAction_1_0() { return cComponentRGBAlphaColorAction_1_0; }

		//"rgba"
		public Keyword getRgbaKeyword_1_1() { return cRgbaKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//red=ColorComponentLiteral
		public Assignment getRedAssignment_1_3() { return cRedAssignment_1_3; }

		//ColorComponentLiteral
		public RuleCall getRedColorComponentLiteralParserRuleCall_1_3_0() { return cRedColorComponentLiteralParserRuleCall_1_3_0; }

		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }

		//green=ColorComponentLiteral
		public Assignment getGreenAssignment_1_5() { return cGreenAssignment_1_5; }

		//ColorComponentLiteral
		public RuleCall getGreenColorComponentLiteralParserRuleCall_1_5_0() { return cGreenColorComponentLiteralParserRuleCall_1_5_0; }

		//","
		public Keyword getCommaKeyword_1_6() { return cCommaKeyword_1_6; }

		//blue=ColorComponentLiteral
		public Assignment getBlueAssignment_1_7() { return cBlueAssignment_1_7; }

		//ColorComponentLiteral
		public RuleCall getBlueColorComponentLiteralParserRuleCall_1_7_0() { return cBlueColorComponentLiteralParserRuleCall_1_7_0; }

		//","
		public Keyword getCommaKeyword_1_8() { return cCommaKeyword_1_8; }

		//opacity=ColorComponentLiteral
		public Assignment getOpacityAssignment_1_9() { return cOpacityAssignment_1_9; }

		//ColorComponentLiteral
		public RuleCall getOpacityColorComponentLiteralParserRuleCall_1_9_0() { return cOpacityColorComponentLiteralParserRuleCall_1_9_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_10() { return cRightParenthesisKeyword_1_10; }

		//{ComponentHSLColor} "hsl" "(" hue=ColorComponentLiteral "," saturation=ColorComponentLiteral ","
		//lightness=ColorComponentLiteral ")"
		public Group getGroup_2() { return cGroup_2; }

		//{ComponentHSLColor}
		public Action getComponentHSLColorAction_2_0() { return cComponentHSLColorAction_2_0; }

		//"hsl"
		public Keyword getHslKeyword_2_1() { return cHslKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//hue=ColorComponentLiteral
		public Assignment getHueAssignment_2_3() { return cHueAssignment_2_3; }

		//ColorComponentLiteral
		public RuleCall getHueColorComponentLiteralParserRuleCall_2_3_0() { return cHueColorComponentLiteralParserRuleCall_2_3_0; }

		//","
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }

		//saturation=ColorComponentLiteral
		public Assignment getSaturationAssignment_2_5() { return cSaturationAssignment_2_5; }

		//ColorComponentLiteral
		public RuleCall getSaturationColorComponentLiteralParserRuleCall_2_5_0() { return cSaturationColorComponentLiteralParserRuleCall_2_5_0; }

		//","
		public Keyword getCommaKeyword_2_6() { return cCommaKeyword_2_6; }

		//lightness=ColorComponentLiteral
		public Assignment getLightnessAssignment_2_7() { return cLightnessAssignment_2_7; }

		//ColorComponentLiteral
		public RuleCall getLightnessColorComponentLiteralParserRuleCall_2_7_0() { return cLightnessColorComponentLiteralParserRuleCall_2_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_8() { return cRightParenthesisKeyword_2_8; }

		//{ComponentHSLAlphaColor} "hsla" "(" hue=ColorComponentLiteral "," saturation=ColorComponentLiteral ","
		//lightness=ColorComponentLiteral "," opacity=ColorComponentLiteral ")"
		public Group getGroup_3() { return cGroup_3; }

		//{ComponentHSLAlphaColor}
		public Action getComponentHSLAlphaColorAction_3_0() { return cComponentHSLAlphaColorAction_3_0; }

		//"hsla"
		public Keyword getHslaKeyword_3_1() { return cHslaKeyword_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//hue=ColorComponentLiteral
		public Assignment getHueAssignment_3_3() { return cHueAssignment_3_3; }

		//ColorComponentLiteral
		public RuleCall getHueColorComponentLiteralParserRuleCall_3_3_0() { return cHueColorComponentLiteralParserRuleCall_3_3_0; }

		//","
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }

		//saturation=ColorComponentLiteral
		public Assignment getSaturationAssignment_3_5() { return cSaturationAssignment_3_5; }

		//ColorComponentLiteral
		public RuleCall getSaturationColorComponentLiteralParserRuleCall_3_5_0() { return cSaturationColorComponentLiteralParserRuleCall_3_5_0; }

		//","
		public Keyword getCommaKeyword_3_6() { return cCommaKeyword_3_6; }

		//lightness=ColorComponentLiteral
		public Assignment getLightnessAssignment_3_7() { return cLightnessAssignment_3_7; }

		//ColorComponentLiteral
		public RuleCall getLightnessColorComponentLiteralParserRuleCall_3_7_0() { return cLightnessColorComponentLiteralParserRuleCall_3_7_0; }

		//","
		public Keyword getCommaKeyword_3_8() { return cCommaKeyword_3_8; }

		//opacity=ColorComponentLiteral
		public Assignment getOpacityAssignment_3_9() { return cOpacityAssignment_3_9; }

		//ColorComponentLiteral
		public RuleCall getOpacityColorComponentLiteralParserRuleCall_3_9_0() { return cOpacityColorComponentLiteralParserRuleCall_3_9_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_10() { return cRightParenthesisKeyword_3_10; }
	}

	public class ColorComponentLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorComponentLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumberNumberLiteralParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cPercentageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPercentagePercentSignKeyword_1_0 = (Keyword)cPercentageAssignment_1.eContents().get(0);
		
		//// validation on ComponentRGBColor:
		////	either all percentages (with correct range, and non-optional % for 0[.0]), or all dimension-less integers 0-255
		//// validation on ComponentRGBAlphaColor:
		////	see ComponentRGBColor + opacity is a dimension-less number between 0.0 and 1.0
		//// validation on ComponentHSLColor:
		////	all percentages (with correct range, and non-optional % for 0[.0])
		//ColorComponentLiteral hidden():
		//	number=NumberLiteral percentage?="%"?;
		public ParserRule getRule() { return rule; }

		//number=NumberLiteral percentage?="%"?
		public Group getGroup() { return cGroup; }

		//number=NumberLiteral
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }

		//NumberLiteral
		public RuleCall getNumberNumberLiteralParserRuleCall_0_0() { return cNumberNumberLiteralParserRuleCall_0_0; }

		//percentage?="%"?
		public Assignment getPercentageAssignment_1() { return cPercentageAssignment_1; }

		//"%"
		public Keyword getPercentagePercentSignKeyword_1_0() { return cPercentagePercentSignKeyword_1_0; }
	}

	public class URLLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URLLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueURLTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// TODO  generate into this grammar to provide content assist/code completion
		//URLLiteral:
		//	value=URL;
		public ParserRule getRule() { return rule; }

		//value=URL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//URL
		public RuleCall getValueURLTerminalRuleCall_0() { return cValueURLTerminalRuleCall_0; }
	}

	public class BareWordLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BareWordLiteral");
		private final Assignment cBareWordAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBareWordIDENTTerminalRuleCall_0 = (RuleCall)cBareWordAssignment.eContents().get(0);
		
		//// something we don't know about:
		//BareWordLiteral:
		//	bareWord=IDENT;
		public ParserRule getRule() { return rule; }

		//bareWord=IDENT
		public Assignment getBareWordAssignment() { return cBareWordAssignment; }

		//IDENT
		public RuleCall getBareWordIDENTTerminalRuleCall_0() { return cBareWordIDENTTerminalRuleCall_0; }
	}

	public class FunctionCallLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCallLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFunctionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFunctionIDENTTerminalRuleCall_0_0_0 = (RuleCall)cFunctionAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cArgumentsAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cArgumentsValueLiteralParserRuleCall_0_2_0_0 = (RuleCall)cArgumentsAssignment_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final RuleCall cArgumentsValueLiteralParserRuleCall_0_2_1_1_0 = (RuleCall)cArgumentsAssignment_0_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAlphaLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAlphaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cOpacityKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cOpacityAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cOpacityNumberLiteralParserRuleCall_1_5_0 = (RuleCall)cOpacityAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//FunctionCallLiteral:
		//	function=IDENT "(" (arguments+=ValueLiteral ("," arguments+=ValueLiteral)*)? ")" | {AlphaLiteral} "alpha" "("
		//	"opacity" "=" opacity=NumberLiteral ")";
		public ParserRule getRule() { return rule; }

		//function=IDENT "(" (arguments+=ValueLiteral ("," arguments+=ValueLiteral)*)? ")" | {AlphaLiteral} "alpha" "(" "opacity"
		//"=" opacity=NumberLiteral ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//function=IDENT "(" (arguments+=ValueLiteral ("," arguments+=ValueLiteral)*)? ")"
		public Group getGroup_0() { return cGroup_0; }

		//function=IDENT
		public Assignment getFunctionAssignment_0_0() { return cFunctionAssignment_0_0; }

		//IDENT
		public RuleCall getFunctionIDENTTerminalRuleCall_0_0_0() { return cFunctionIDENTTerminalRuleCall_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//(arguments+=ValueLiteral ("," arguments+=ValueLiteral)*)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//arguments+=ValueLiteral
		public Assignment getArgumentsAssignment_0_2_0() { return cArgumentsAssignment_0_2_0; }

		//ValueLiteral
		public RuleCall getArgumentsValueLiteralParserRuleCall_0_2_0_0() { return cArgumentsValueLiteralParserRuleCall_0_2_0_0; }

		//("," arguments+=ValueLiteral)*
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }

		//","
		public Keyword getCommaKeyword_0_2_1_0() { return cCommaKeyword_0_2_1_0; }

		//arguments+=ValueLiteral
		public Assignment getArgumentsAssignment_0_2_1_1() { return cArgumentsAssignment_0_2_1_1; }

		//ValueLiteral
		public RuleCall getArgumentsValueLiteralParserRuleCall_0_2_1_1_0() { return cArgumentsValueLiteralParserRuleCall_0_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//{AlphaLiteral} "alpha" "(" "opacity" "=" opacity=NumberLiteral ")"
		public Group getGroup_1() { return cGroup_1; }

		//{AlphaLiteral}
		public Action getAlphaLiteralAction_1_0() { return cAlphaLiteralAction_1_0; }

		//"alpha"
		public Keyword getAlphaKeyword_1_1() { return cAlphaKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//"opacity"
		public Keyword getOpacityKeyword_1_3() { return cOpacityKeyword_1_3; }

		//"="
		public Keyword getEqualsSignKeyword_1_4() { return cEqualsSignKeyword_1_4; }

		//opacity=NumberLiteral
		public Assignment getOpacityAssignment_1_5() { return cOpacityAssignment_1_5; }

		//NumberLiteral
		public RuleCall getOpacityNumberLiteralParserRuleCall_1_5_0() { return cOpacityNumberLiteralParserRuleCall_1_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
	}
	
	
	public class KnownPropertiesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "KnownProperties");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cColorEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cColorColorKeyword_0_0 = (Keyword)cColorEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBorder_topEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBorder_topBorderTopKeyword_1_0 = (Keyword)cBorder_topEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum KnownProperties:
		//	color | border_top= // | ..
		//	"border-top";
		public EnumRule getRule() { return rule; }

		//color | border_top= // | ..
		//"border-top"
		public Alternatives getAlternatives() { return cAlternatives; }

		//color
		public EnumLiteralDeclaration getColorEnumLiteralDeclaration_0() { return cColorEnumLiteralDeclaration_0; }

		//"color"
		public Keyword getColorColorKeyword_0_0() { return cColorColorKeyword_0_0; }

		//border_top= // | ..
		//"border-top"
		public EnumLiteralDeclaration getBorder_topEnumLiteralDeclaration_1() { return cBorder_topEnumLiteralDeclaration_1; }

		//// | ..
		//"border-top"
		public Keyword getBorder_topBorderTopKeyword_1_0() { return cBorder_topBorderTopKeyword_1_0; }
	}

	public class AttributeSelectorMatchersElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeSelectorMatchers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPrefixEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPrefixCircumflexAccentEqualsSignKeyword_0_0 = (Keyword)cPrefixEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSuffixEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSuffixDollarSignEqualsSignKeyword_1_0 = (Keyword)cSuffixEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSubstringEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSubstringAsteriskEqualsSignKeyword_2_0 = (Keyword)cSubstringEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cExactEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cExactEqualsSignKeyword_3_0 = (Keyword)cExactEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIncludesEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIncludesTildeEqualsSignKeyword_4_0 = (Keyword)cIncludesEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLanguageEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLanguageVerticalLineEqualsSignKeyword_5_0 = (Keyword)cLanguageEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum AttributeSelectorMatchers:
		//	prefix="^=" | suffix="$=" | substring="*=" | exact= // TODO  check name
		//	"=" | includes="~=" | language= // TODO  check name
		//	"|=";
		public EnumRule getRule() { return rule; }

		//prefix="^=" | suffix="$=" | substring="*=" | exact= // TODO  check name
		//"=" | includes="~=" | language= // TODO  check name
		//"|="
		public Alternatives getAlternatives() { return cAlternatives; }

		//prefix="^="
		public EnumLiteralDeclaration getPrefixEnumLiteralDeclaration_0() { return cPrefixEnumLiteralDeclaration_0; }

		//"^="
		public Keyword getPrefixCircumflexAccentEqualsSignKeyword_0_0() { return cPrefixCircumflexAccentEqualsSignKeyword_0_0; }

		//suffix="$="
		public EnumLiteralDeclaration getSuffixEnumLiteralDeclaration_1() { return cSuffixEnumLiteralDeclaration_1; }

		//"$="
		public Keyword getSuffixDollarSignEqualsSignKeyword_1_0() { return cSuffixDollarSignEqualsSignKeyword_1_0; }

		//substring="*="
		public EnumLiteralDeclaration getSubstringEnumLiteralDeclaration_2() { return cSubstringEnumLiteralDeclaration_2; }

		//"*="
		public Keyword getSubstringAsteriskEqualsSignKeyword_2_0() { return cSubstringAsteriskEqualsSignKeyword_2_0; }

		//exact= // TODO  check name
		//"="
		public EnumLiteralDeclaration getExactEnumLiteralDeclaration_3() { return cExactEnumLiteralDeclaration_3; }

		//// TODO  check name
		//"="
		public Keyword getExactEqualsSignKeyword_3_0() { return cExactEqualsSignKeyword_3_0; }

		//includes="~="
		public EnumLiteralDeclaration getIncludesEnumLiteralDeclaration_4() { return cIncludesEnumLiteralDeclaration_4; }

		//"~="
		public Keyword getIncludesTildeEqualsSignKeyword_4_0() { return cIncludesTildeEqualsSignKeyword_4_0; }

		//language= // TODO  check name
		//"|="
		public EnumLiteralDeclaration getLanguageEnumLiteralDeclaration_5() { return cLanguageEnumLiteralDeclaration_5; }

		//// TODO  check name
		//"|="
		public Keyword getLanguageVerticalLineEqualsSignKeyword_5_0() { return cLanguageVerticalLineEqualsSignKeyword_5_0; }
	}

	public class NoArgsPseudosElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NoArgsPseudos");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLinkEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLinkLinkKeyword_0_0 = (Keyword)cLinkEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVisitedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVisitedVisitedKeyword_1_0 = (Keyword)cVisitedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHoverEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHoverHoverKeyword_2_0 = (Keyword)cHoverEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cActiveEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cActiveActiveKeyword_3_0 = (Keyword)cActiveEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFocusEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFocusFocusKeyword_4_0 = (Keyword)cFocusEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTargetEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTargetTargetKeyword_5_0 = (Keyword)cTargetEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cEnabledEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cEnabledEnabledKeyword_6_0 = (Keyword)cEnabledEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDisabledEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDisabledDisabledKeyword_7_0 = (Keyword)cDisabledEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cCheckedEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cCheckedCheckedKeyword_8_0 = (Keyword)cCheckedEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cIndeterminateEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cIndeterminateIndeterminateKeyword_9_0 = (Keyword)cIndeterminateEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cRootEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cRootRootKeyword_10_0 = (Keyword)cRootEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cFirstChildEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cFirstChildFirstChildKeyword_11_0 = (Keyword)cFirstChildEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cLastChildEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cLastChildLastChildKeyword_12_0 = (Keyword)cLastChildEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cOnlyChildEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cOnlyChildOnlyChildKeyword_13_0 = (Keyword)cOnlyChildEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cEmptyEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cEmptyEmptyKeyword_14_0 = (Keyword)cEmptyEnumLiteralDeclaration_14.eContents().get(0);
		
		//enum NoArgsPseudos:
		//	link | visited | hover | active | focus | target | enabled | disabled | checked | indeterminate | root |
		//	firstChild="first-child" | lastChild="last-child" | onlyChild="only-child" | empty;
		public EnumRule getRule() { return rule; }

		//link | visited | hover | active | focus | target | enabled | disabled | checked | indeterminate | root |
		//firstChild="first-child" | lastChild="last-child" | onlyChild="only-child" | empty
		public Alternatives getAlternatives() { return cAlternatives; }

		//link
		public EnumLiteralDeclaration getLinkEnumLiteralDeclaration_0() { return cLinkEnumLiteralDeclaration_0; }

		//"link"
		public Keyword getLinkLinkKeyword_0_0() { return cLinkLinkKeyword_0_0; }

		//visited
		public EnumLiteralDeclaration getVisitedEnumLiteralDeclaration_1() { return cVisitedEnumLiteralDeclaration_1; }

		//"visited"
		public Keyword getVisitedVisitedKeyword_1_0() { return cVisitedVisitedKeyword_1_0; }

		//hover
		public EnumLiteralDeclaration getHoverEnumLiteralDeclaration_2() { return cHoverEnumLiteralDeclaration_2; }

		//"hover"
		public Keyword getHoverHoverKeyword_2_0() { return cHoverHoverKeyword_2_0; }

		//active
		public EnumLiteralDeclaration getActiveEnumLiteralDeclaration_3() { return cActiveEnumLiteralDeclaration_3; }

		//"active"
		public Keyword getActiveActiveKeyword_3_0() { return cActiveActiveKeyword_3_0; }

		//focus
		public EnumLiteralDeclaration getFocusEnumLiteralDeclaration_4() { return cFocusEnumLiteralDeclaration_4; }

		//"focus"
		public Keyword getFocusFocusKeyword_4_0() { return cFocusFocusKeyword_4_0; }

		//target
		public EnumLiteralDeclaration getTargetEnumLiteralDeclaration_5() { return cTargetEnumLiteralDeclaration_5; }

		//"target"
		public Keyword getTargetTargetKeyword_5_0() { return cTargetTargetKeyword_5_0; }

		//enabled
		public EnumLiteralDeclaration getEnabledEnumLiteralDeclaration_6() { return cEnabledEnumLiteralDeclaration_6; }

		//"enabled"
		public Keyword getEnabledEnabledKeyword_6_0() { return cEnabledEnabledKeyword_6_0; }

		//disabled
		public EnumLiteralDeclaration getDisabledEnumLiteralDeclaration_7() { return cDisabledEnumLiteralDeclaration_7; }

		//"disabled"
		public Keyword getDisabledDisabledKeyword_7_0() { return cDisabledDisabledKeyword_7_0; }

		//checked
		public EnumLiteralDeclaration getCheckedEnumLiteralDeclaration_8() { return cCheckedEnumLiteralDeclaration_8; }

		//"checked"
		public Keyword getCheckedCheckedKeyword_8_0() { return cCheckedCheckedKeyword_8_0; }

		//indeterminate
		public EnumLiteralDeclaration getIndeterminateEnumLiteralDeclaration_9() { return cIndeterminateEnumLiteralDeclaration_9; }

		//"indeterminate"
		public Keyword getIndeterminateIndeterminateKeyword_9_0() { return cIndeterminateIndeterminateKeyword_9_0; }

		//root
		public EnumLiteralDeclaration getRootEnumLiteralDeclaration_10() { return cRootEnumLiteralDeclaration_10; }

		//"root"
		public Keyword getRootRootKeyword_10_0() { return cRootRootKeyword_10_0; }

		//firstChild="first-child"
		public EnumLiteralDeclaration getFirstChildEnumLiteralDeclaration_11() { return cFirstChildEnumLiteralDeclaration_11; }

		//"first-child"
		public Keyword getFirstChildFirstChildKeyword_11_0() { return cFirstChildFirstChildKeyword_11_0; }

		//lastChild="last-child"
		public EnumLiteralDeclaration getLastChildEnumLiteralDeclaration_12() { return cLastChildEnumLiteralDeclaration_12; }

		//"last-child"
		public Keyword getLastChildLastChildKeyword_12_0() { return cLastChildLastChildKeyword_12_0; }

		//onlyChild="only-child"
		public EnumLiteralDeclaration getOnlyChildEnumLiteralDeclaration_13() { return cOnlyChildEnumLiteralDeclaration_13; }

		//"only-child"
		public Keyword getOnlyChildOnlyChildKeyword_13_0() { return cOnlyChildOnlyChildKeyword_13_0; }

		//empty
		public EnumLiteralDeclaration getEmptyEnumLiteralDeclaration_14() { return cEmptyEnumLiteralDeclaration_14; }

		//"empty"
		public Keyword getEmptyEmptyKeyword_14_0() { return cEmptyEmptyKeyword_14_0; }
	}

	public class PseudoElementsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PseudoElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFirstLetterEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFirstLetterFirstLetterKeyword_0_0 = (Keyword)cFirstLetterEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFirstLineEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFirstLineFirstLineKeyword_1_0 = (Keyword)cFirstLineEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBeforeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBeforeBeforeKeyword_2_0 = (Keyword)cBeforeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAfterEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAfterAfterKeyword_3_0 = (Keyword)cAfterEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum PseudoElements:
		//	firstLetter="first-letter" | firstLine="first-line" | before | after;
		public EnumRule getRule() { return rule; }

		//firstLetter="first-letter" | firstLine="first-line" | before | after
		public Alternatives getAlternatives() { return cAlternatives; }

		//firstLetter="first-letter"
		public EnumLiteralDeclaration getFirstLetterEnumLiteralDeclaration_0() { return cFirstLetterEnumLiteralDeclaration_0; }

		//"first-letter"
		public Keyword getFirstLetterFirstLetterKeyword_0_0() { return cFirstLetterFirstLetterKeyword_0_0; }

		//firstLine="first-line"
		public EnumLiteralDeclaration getFirstLineEnumLiteralDeclaration_1() { return cFirstLineEnumLiteralDeclaration_1; }

		//"first-line"
		public Keyword getFirstLineFirstLineKeyword_1_0() { return cFirstLineFirstLineKeyword_1_0; }

		//before
		public EnumLiteralDeclaration getBeforeEnumLiteralDeclaration_2() { return cBeforeEnumLiteralDeclaration_2; }

		//"before"
		public Keyword getBeforeBeforeKeyword_2_0() { return cBeforeBeforeKeyword_2_0; }

		//after
		public EnumLiteralDeclaration getAfterEnumLiteralDeclaration_3() { return cAfterEnumLiteralDeclaration_3; }

		//"after"
		public Keyword getAfterAfterKeyword_3_0() { return cAfterAfterKeyword_3_0; }
	}

	public class FunctionalPseudoClassesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionalPseudoClasses");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNthChildEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNthChildNthChildKeyword_0_0 = (Keyword)cNthChildEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNthLastChildEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNthLastChildNthLastChildKeyword_1_0 = (Keyword)cNthLastChildEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNthOfTypeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNthOfTypeNthOfTypeKeyword_2_0 = (Keyword)cNthOfTypeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNthLastOfTypeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNthLastOfTypeNthLastIfTypeKeyword_3_0 = (Keyword)cNthLastOfTypeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFirstOfTypeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFirstOfTypeFirstOfTypeKeyword_4_0 = (Keyword)cFirstOfTypeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLastOfTypeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLastOfTypeLastOfTypeKeyword_5_0 = (Keyword)cLastOfTypeEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cOnlyOfTypeEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cOnlyOfTypeOnlyOfTypeKeyword_6_0 = (Keyword)cOnlyOfTypeEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum FunctionalPseudoClasses:
		//	nthChild="nth-child" | nthLastChild="nth-last-child" | nthOfType="nth-of-type" | nthLastOfType="nth-last-if-type" |
		//	firstOfType="first-of-type" | lastOfType="last-of-type" | onlyOfType="only-of-type";
		public EnumRule getRule() { return rule; }

		//nthChild="nth-child" | nthLastChild="nth-last-child" | nthOfType="nth-of-type" | nthLastOfType="nth-last-if-type" |
		//firstOfType="first-of-type" | lastOfType="last-of-type" | onlyOfType="only-of-type"
		public Alternatives getAlternatives() { return cAlternatives; }

		//nthChild="nth-child"
		public EnumLiteralDeclaration getNthChildEnumLiteralDeclaration_0() { return cNthChildEnumLiteralDeclaration_0; }

		//"nth-child"
		public Keyword getNthChildNthChildKeyword_0_0() { return cNthChildNthChildKeyword_0_0; }

		//nthLastChild="nth-last-child"
		public EnumLiteralDeclaration getNthLastChildEnumLiteralDeclaration_1() { return cNthLastChildEnumLiteralDeclaration_1; }

		//"nth-last-child"
		public Keyword getNthLastChildNthLastChildKeyword_1_0() { return cNthLastChildNthLastChildKeyword_1_0; }

		//nthOfType="nth-of-type"
		public EnumLiteralDeclaration getNthOfTypeEnumLiteralDeclaration_2() { return cNthOfTypeEnumLiteralDeclaration_2; }

		//"nth-of-type"
		public Keyword getNthOfTypeNthOfTypeKeyword_2_0() { return cNthOfTypeNthOfTypeKeyword_2_0; }

		//nthLastOfType="nth-last-if-type"
		public EnumLiteralDeclaration getNthLastOfTypeEnumLiteralDeclaration_3() { return cNthLastOfTypeEnumLiteralDeclaration_3; }

		//"nth-last-if-type"
		public Keyword getNthLastOfTypeNthLastIfTypeKeyword_3_0() { return cNthLastOfTypeNthLastIfTypeKeyword_3_0; }

		//firstOfType="first-of-type"
		public EnumLiteralDeclaration getFirstOfTypeEnumLiteralDeclaration_4() { return cFirstOfTypeEnumLiteralDeclaration_4; }

		//"first-of-type"
		public Keyword getFirstOfTypeFirstOfTypeKeyword_4_0() { return cFirstOfTypeFirstOfTypeKeyword_4_0; }

		//lastOfType="last-of-type"
		public EnumLiteralDeclaration getLastOfTypeEnumLiteralDeclaration_5() { return cLastOfTypeEnumLiteralDeclaration_5; }

		//"last-of-type"
		public Keyword getLastOfTypeLastOfTypeKeyword_5_0() { return cLastOfTypeLastOfTypeKeyword_5_0; }

		//onlyOfType="only-of-type"
		public EnumLiteralDeclaration getOnlyOfTypeEnumLiteralDeclaration_6() { return cOnlyOfTypeEnumLiteralDeclaration_6; }

		//"only-of-type"
		public Keyword getOnlyOfTypeOnlyOfTypeKeyword_6_0() { return cOnlyOfTypeOnlyOfTypeKeyword_6_0; }
	}

	public class ParitiesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Parities");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOddOddKeyword_0_0 = (Keyword)cOddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEvenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEvenEvenKeyword_1_0 = (Keyword)cEvenEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Parities:
		//	odd | even;
		public EnumRule getRule() { return rule; }

		//odd | even
		public Alternatives getAlternatives() { return cAlternatives; }

		//odd
		public EnumLiteralDeclaration getOddEnumLiteralDeclaration_0() { return cOddEnumLiteralDeclaration_0; }

		//"odd"
		public Keyword getOddOddKeyword_0_0() { return cOddOddKeyword_0_0; }

		//even
		public EnumLiteralDeclaration getEvenEnumLiteralDeclaration_1() { return cEvenEnumLiteralDeclaration_1; }

		//"even"
		public Keyword getEvenEvenKeyword_1_0() { return cEvenEvenKeyword_1_0; }
	}

	public class DimensionsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Dimensions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCmEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCmCmKeyword_1_0 = (Keyword)cCmEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMmEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMmMmKeyword_2_0 = (Keyword)cMmEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPtEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPtPtKeyword_3_0 = (Keyword)cPtEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPcEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPcPcKeyword_4_0 = (Keyword)cPcEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cEmEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cEmEmKeyword_5_0 = (Keyword)cEmEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cExEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cExExKeyword_6_0 = (Keyword)cExEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPxEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPxPxKeyword_7_0 = (Keyword)cPxEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cPercEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cPercPercentSignKeyword_8_0 = (Keyword)cPercEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum Dimensions:
		//	in | cm | mm | pt | pc | em | ex | px | perc="%";
		public EnumRule getRule() { return rule; }

		//in | cm | mm | pt | pc | em | ex | px | perc="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }

		//cm
		public EnumLiteralDeclaration getCmEnumLiteralDeclaration_1() { return cCmEnumLiteralDeclaration_1; }

		//"cm"
		public Keyword getCmCmKeyword_1_0() { return cCmCmKeyword_1_0; }

		//mm
		public EnumLiteralDeclaration getMmEnumLiteralDeclaration_2() { return cMmEnumLiteralDeclaration_2; }

		//"mm"
		public Keyword getMmMmKeyword_2_0() { return cMmMmKeyword_2_0; }

		//pt
		public EnumLiteralDeclaration getPtEnumLiteralDeclaration_3() { return cPtEnumLiteralDeclaration_3; }

		//"pt"
		public Keyword getPtPtKeyword_3_0() { return cPtPtKeyword_3_0; }

		//pc
		public EnumLiteralDeclaration getPcEnumLiteralDeclaration_4() { return cPcEnumLiteralDeclaration_4; }

		//"pc"
		public Keyword getPcPcKeyword_4_0() { return cPcPcKeyword_4_0; }

		//em
		public EnumLiteralDeclaration getEmEnumLiteralDeclaration_5() { return cEmEnumLiteralDeclaration_5; }

		//"em"
		public Keyword getEmEmKeyword_5_0() { return cEmEmKeyword_5_0; }

		//ex
		public EnumLiteralDeclaration getExEnumLiteralDeclaration_6() { return cExEnumLiteralDeclaration_6; }

		//"ex"
		public Keyword getExExKeyword_6_0() { return cExExKeyword_6_0; }

		//px
		public EnumLiteralDeclaration getPxEnumLiteralDeclaration_7() { return cPxEnumLiteralDeclaration_7; }

		//"px"
		public Keyword getPxPxKeyword_7_0() { return cPxPxKeyword_7_0; }

		//perc="%"
		public EnumLiteralDeclaration getPercEnumLiteralDeclaration_8() { return cPercEnumLiteralDeclaration_8; }

		//"%"
		public Keyword getPercPercentSignKeyword_8_0() { return cPercPercentSignKeyword_8_0; }
	}

	public class ColorNamesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ColorNames");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBlackEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBlackBlackKeyword_0_0 = (Keyword)cBlackEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWhiteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWhiteWhiteKeyword_1_0 = (Keyword)cWhiteEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ColorNames:
		//	black | // | ...
		//	white;
		public EnumRule getRule() { return rule; }

		//black | // | ...
		//white
		public Alternatives getAlternatives() { return cAlternatives; }

		//black
		public EnumLiteralDeclaration getBlackEnumLiteralDeclaration_0() { return cBlackEnumLiteralDeclaration_0; }

		//"black"
		public Keyword getBlackBlackKeyword_0_0() { return cBlackBlackKeyword_0_0; }

		//// | ...
		//white
		public EnumLiteralDeclaration getWhiteEnumLiteralDeclaration_1() { return cWhiteEnumLiteralDeclaration_1; }

		//"white"
		public Keyword getWhiteWhiteKeyword_1_0() { return cWhiteWhiteKeyword_1_0; }
	}
	
	private StylesheetElements pStylesheet;
	private CSSTopLevelStatementElements pCSSTopLevelStatement;
	private CSSOtherTopLevelDeclarationElements pCSSOtherTopLevelDeclaration;
	private ImportDeclarationElements pImportDeclaration;
	private MediaDeclarationElements pMediaDeclaration;
	private MediaDeclarationMembersElements pMediaDeclarationMembers;
	private MediaQueryElements pMediaQuery;
	private MediaQueryExpressionElements pMediaQueryExpression;
	private PageDeclarationElements pPageDeclaration;
	private NamespaceDeclarationElements pNamespaceDeclaration;
	private FontFaceDeclarationElements pFontFaceDeclaration;
	private RuleSetElements pRuleSet;
	private RuleSetBodyElements pRuleSetBody;
	private PropertyDeclarationElements pPropertyDeclaration;
	private KnownPropertyDeclarationElements pKnownPropertyDeclaration;
	private UnrecognizedPropertyDeclarationElements pUnrecognizedPropertyDeclaration;
	private PropertyNameElements pPropertyName;
	private PropertyValuesListsElements pPropertyValuesLists;
	private PropertyValuesListElements pPropertyValuesList;
	private PropertyValueElements pPropertyValue;
	private KnownPropertiesElements unknownRuleKnownProperties;
	private SelectorElements pSelector;
	private CombinatorExpressionElements pCombinatorExpression;
	private SimpleSelectorSequenceElements pSimpleSelectorSequence;
	private TailSimpleSelectorElements pTailSimpleSelector;
	private SimpleSelectorElements pSimpleSelector;
	private TypeSelectorElements pTypeSelector;
	private NamespacePrefixElements pNamespacePrefix;
	private UniversalSelectorElements pUniversalSelector;
	private AttributeSelectorElements pAttributeSelector;
	private AttributeElements pAttribute;
	private AttributeSelectorMatchersElements unknownRuleAttributeSelectorMatchers;
	private AttributeValueLiteralElements pAttributeValueLiteral;
	private IDSelectorElements pIDSelector;
	private ClassSelectorElements pClassSelector;
	private PseudoSelectorElements pPseudoSelector;
	private NoArgsPseudoClassSelectorElements pNoArgsPseudoClassSelector;
	private NoArgsPseudosElements unknownRuleNoArgsPseudos;
	private PseudoElementSelectorElements pPseudoElementSelector;
	private PseudoElementsElements unknownRulePseudoElements;
	private LanguagePseudoClassSelectorElements pLanguagePseudoClassSelector;
	private FunctionalPseudoClassSelectorElements pFunctionalPseudoClassSelector;
	private FunctionalPseudoClassesElements unknownRuleFunctionalPseudoClasses;
	private TypeArgumentElements pTypeArgument;
	private LinearArgumentElements pLinearArgument;
	private CoefficientElements pCoefficient;
	private ConstantArgumentElements pConstantArgument;
	private ParityArgumentElements pParityArgument;
	private ParitiesElements unknownRuleParities;
	private NegationSelectorElements pNegationSelector;
	private NegationSimpleSelectorElements pNegationSimpleSelector;
	private ValueLiteralElements pValueLiteral;
	private NumberLiteralElements pNumberLiteral;
	private SizeLiteralElements pSizeLiteral;
	private DimensionsElements unknownRuleDimensions;
	private StringLiteralElements pStringLiteral;
	private ColorLiteralElements pColorLiteral;
	private ComponentColorLiteralElements pComponentColorLiteral;
	private ColorComponentLiteralElements pColorComponentLiteral;
	private ColorNamesElements unknownRuleColorNames;
	private URLLiteralElements pURLLiteral;
	private BareWordLiteralElements pBareWordLiteral;
	private FunctionCallLiteralElements pFunctionCallLiteral;
	private TerminalRule tHEX_COLOR;
	private TerminalRule tIDENT;
	private TerminalRule tHASH_ID;
	private TerminalRule tDOT_ID;
	private TerminalRule tURL;
	private TerminalRule tINT;
	private TerminalRule tDECIMAL;
	private TerminalRule tHEX_DIGIT;
	private TerminalRule tDEC_DIGIT;
	private TerminalRule tID_PART;
	private TerminalRule tID_START;
	private TerminalRule tPREFIXABLE_ID_START;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tWS;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public CSSGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	/// *
	// * +------------------------------+
	// * | CSS2.1 document-level syntax |
	// * +------------------------------+
	// * 
	// * see: http://www.w3.org/TR/CSS21/grammar.html
	// * / Stylesheet:
	//	("@charset" charSet=STRING ";")? imports+=ImportDeclaration* statements+=CSSTopLevelStatement*;
	public StylesheetElements getStylesheetAccess() {
		return (pStylesheet != null) ? pStylesheet : (pStylesheet = new StylesheetElements());
	}
	
	public ParserRule getStylesheetRule() {
		return getStylesheetAccess().getRule();
	}

	//// TODO  CDO/CDC stuff (i.e. '<!--' vs. '-->')
	//CSSTopLevelStatement:
	//	RuleSet | CSSOtherTopLevelDeclaration;
	public CSSTopLevelStatementElements getCSSTopLevelStatementAccess() {
		return (pCSSTopLevelStatement != null) ? pCSSTopLevelStatement : (pCSSTopLevelStatement = new CSSTopLevelStatementElements());
	}
	
	public ParserRule getCSSTopLevelStatementRule() {
		return getCSSTopLevelStatementAccess().getRule();
	}

	//CSSOtherTopLevelDeclaration:
	//	MediaDeclaration | PageDeclaration | NamespaceDeclaration | FontFaceDeclaration;
	public CSSOtherTopLevelDeclarationElements getCSSOtherTopLevelDeclarationAccess() {
		return (pCSSOtherTopLevelDeclaration != null) ? pCSSOtherTopLevelDeclaration : (pCSSOtherTopLevelDeclaration = new CSSOtherTopLevelDeclarationElements());
	}
	
	public ParserRule getCSSOtherTopLevelDeclarationRule() {
		return getCSSOtherTopLevelDeclarationAccess().getRule();
	}

	//ImportDeclaration:
	//	"@import" (importURI=STRING | url=URL) (media+=IDENT ("," media+=IDENT)*)? ";";
	public ImportDeclarationElements getImportDeclarationAccess() {
		return (pImportDeclaration != null) ? pImportDeclaration : (pImportDeclaration = new ImportDeclarationElements());
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}

	//MediaDeclaration:
	//	"@media" mediaQueries+=MediaQuery ("," media+=MediaQuery)* "{" members+=MediaDeclarationMembers* "}";
	public MediaDeclarationElements getMediaDeclarationAccess() {
		return (pMediaDeclaration != null) ? pMediaDeclaration : (pMediaDeclaration = new MediaDeclarationElements());
	}
	
	public ParserRule getMediaDeclarationRule() {
		return getMediaDeclarationAccess().getRule();
	}

	//MediaDeclarationMembers:
	//	RuleSet | PropertyDeclaration ";";
	public MediaDeclarationMembersElements getMediaDeclarationMembersAccess() {
		return (pMediaDeclarationMembers != null) ? pMediaDeclarationMembers : (pMediaDeclarationMembers = new MediaDeclarationMembersElements());
	}
	
	public ParserRule getMediaDeclarationMembersRule() {
		return getMediaDeclarationMembersAccess().getRule();
	}

	//MediaQuery:
	//	(only?="only" | not?="not")? mediaType=IDENT ("and" expressions+=MediaQueryExpression)* |
	//	expressions+=MediaQueryExpression ("and" expressions+=MediaQueryExpression)*;
	public MediaQueryElements getMediaQueryAccess() {
		return (pMediaQuery != null) ? pMediaQuery : (pMediaQuery = new MediaQueryElements());
	}
	
	public ParserRule getMediaQueryRule() {
		return getMediaQueryAccess().getRule();
	}

	//MediaQueryExpression:
	//	"(" feature=IDENT (":" expression=ValueLiteral)? ")";
	public MediaQueryExpressionElements getMediaQueryExpressionAccess() {
		return (pMediaQueryExpression != null) ? pMediaQueryExpression : (pMediaQueryExpression = new MediaQueryExpressionElements());
	}
	
	public ParserRule getMediaQueryExpressionRule() {
		return getMediaQueryExpressionAccess().getRule();
	}

	//PageDeclaration:
	//	"@page" (":" pseudoPage=IDENT)? body=RuleSetBody;
	public PageDeclarationElements getPageDeclarationAccess() {
		return (pPageDeclaration != null) ? pPageDeclaration : (pPageDeclaration = new PageDeclarationElements());
	}
	
	public ParserRule getPageDeclarationRule() {
		return getPageDeclarationAccess().getRule();
	}

	//NamespaceDeclaration:
	//	"@namespace" name=IDENT? url=(STRING | URL) ";";
	public NamespaceDeclarationElements getNamespaceDeclarationAccess() {
		return (pNamespaceDeclaration != null) ? pNamespaceDeclaration : (pNamespaceDeclaration = new NamespaceDeclarationElements());
	}
	
	public ParserRule getNamespaceDeclarationRule() {
		return getNamespaceDeclarationAccess().getRule();
	}

	//FontFaceDeclaration:
	//	"@font-face" body= // TODO  make this more specific for @font-face
	//	RuleSetBody;
	public FontFaceDeclarationElements getFontFaceDeclarationAccess() {
		return (pFontFaceDeclaration != null) ? pFontFaceDeclaration : (pFontFaceDeclaration = new FontFaceDeclarationElements());
	}
	
	public ParserRule getFontFaceDeclarationRule() {
		return getFontFaceDeclarationAccess().getRule();
	}

	//RuleSet:
	//	selectors+=Selector ("," selectors+=Selector)* // ~ selectors_group
	//	body=RuleSetBody;
	public RuleSetElements getRuleSetAccess() {
		return (pRuleSet != null) ? pRuleSet : (pRuleSet = new RuleSetElements());
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}

	/// *
	//	 * Note that this grammar is a little wider than the specification allows,
	//	 * since whitespace following a Selector is hidden.
	//	 * / RuleSetBody:
	//	{RuleSetBody} "{" (declarations+=PropertyDeclaration (";" declarations+=PropertyDeclaration)* ";"?)? "}";
	public RuleSetBodyElements getRuleSetBodyAccess() {
		return (pRuleSetBody != null) ? pRuleSetBody : (pRuleSetBody = new RuleSetBodyElements());
	}
	
	public ParserRule getRuleSetBodyRule() {
		return getRuleSetBodyAccess().getRule();
	}

	/// **
	//	 * Note that this grammar is a little wider than the specification allows,
	//	 * since a closing semi-colon is not considered illegal (which it is in the strict sense).
	//	 * / PropertyDeclaration:
	//	KnownPropertyDeclaration | UnrecognizedPropertyDeclaration;
	public PropertyDeclarationElements getPropertyDeclarationAccess() {
		return (pPropertyDeclaration != null) ? pPropertyDeclaration : (pPropertyDeclaration = new PropertyDeclarationElements());
	}
	
	public ParserRule getPropertyDeclarationRule() {
		return getPropertyDeclarationAccess().getRule();
	}

	//KnownPropertyDeclaration:
	//	name=KnownProperties ":" valuesLists=PropertyValuesLists;
	public KnownPropertyDeclarationElements getKnownPropertyDeclarationAccess() {
		return (pKnownPropertyDeclaration != null) ? pKnownPropertyDeclaration : (pKnownPropertyDeclaration = new KnownPropertyDeclarationElements());
	}
	
	public ParserRule getKnownPropertyDeclarationRule() {
		return getKnownPropertyDeclarationAccess().getRule();
	}

	//UnrecognizedPropertyDeclaration:
	//	name=PropertyName ":" valuesLists=PropertyValuesLists;
	public UnrecognizedPropertyDeclarationElements getUnrecognizedPropertyDeclarationAccess() {
		return (pUnrecognizedPropertyDeclaration != null) ? pUnrecognizedPropertyDeclaration : (pUnrecognizedPropertyDeclaration = new UnrecognizedPropertyDeclarationElements());
	}
	
	public ParserRule getUnrecognizedPropertyDeclarationRule() {
		return getUnrecognizedPropertyDeclarationAccess().getRule();
	}

	//PropertyName:
	//	IDENT | "empty" | // TODO  add other keywords here (possibly through generation)
	//	"alpha";
	public PropertyNameElements getPropertyNameAccess() {
		return (pPropertyName != null) ? pPropertyName : (pPropertyName = new PropertyNameElements());
	}
	
	public ParserRule getPropertyNameRule() {
		return getPropertyNameAccess().getRule();
	}

	//PropertyValuesLists:
	//	lists+=PropertyValuesList ("," lists+=PropertyValuesList)*;
	public PropertyValuesListsElements getPropertyValuesListsAccess() {
		return (pPropertyValuesLists != null) ? pPropertyValuesLists : (pPropertyValuesLists = new PropertyValuesListsElements());
	}
	
	public ParserRule getPropertyValuesListsRule() {
		return getPropertyValuesListsAccess().getRule();
	}

	//PropertyValuesList:
	//	values+=PropertyValue+;
	public PropertyValuesListElements getPropertyValuesListAccess() {
		return (pPropertyValuesList != null) ? pPropertyValuesList : (pPropertyValuesList = new PropertyValuesListElements());
	}
	
	public ParserRule getPropertyValuesListRule() {
		return getPropertyValuesListAccess().getRule();
	}

	//PropertyValue hidden(WS):
	//	value=ValueLiteral important?="!important"?;
	public PropertyValueElements getPropertyValueAccess() {
		return (pPropertyValue != null) ? pPropertyValue : (pPropertyValue = new PropertyValueElements());
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//enum KnownProperties:
	//	color | border_top= // | ..
	//	"border-top";
	public KnownPropertiesElements getKnownPropertiesAccess() {
		return (unknownRuleKnownProperties != null) ? unknownRuleKnownProperties : (unknownRuleKnownProperties = new KnownPropertiesElements());
	}
	
	public EnumRule getKnownPropertiesRule() {
		return getKnownPropertiesAccess().getRule();
	}

	//// TODO  generate into this grammar to provide content assist/code completion
	/// *
	// * +-----------+
	// * | Selectors |
	// * +-----------+
	// * 
	// * Specification: http://www.w3.org/TR/css3-selectors
	// * / Selector:
	//	CombinatorExpression;
	public SelectorElements getSelectorAccess() {
		return (pSelector != null) ? pSelector : (pSelector = new SelectorElements());
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//// TODO  make this a simpler, tail-recursive structure
	//// TODO  add ML_COMMENTS
	//CombinatorExpression returns Selector hidden():
	//	SimpleSelectorSequence ({DescendantCombinator.left=current} wsI=WS right=SimpleSelectorSequence |
	//	{ChildCombinator.left=current} wsL=WS? ">" wsR=WS? right=SimpleSelectorSequence |
	//	{AdjacentSiblingCombinator.left=current} wsL=WS? "+" wsR=WS? right=SimpleSelectorSequence |
	//	{GeneralSiblingCombinator.left=current} wsL=WS? "~" wsR=WS? right=SimpleSelectorSequence)*;
	public CombinatorExpressionElements getCombinatorExpressionAccess() {
		return (pCombinatorExpression != null) ? pCombinatorExpression : (pCombinatorExpression = new CombinatorExpressionElements());
	}
	
	public ParserRule getCombinatorExpressionRule() {
		return getCombinatorExpressionAccess().getRule();
	}

	/// *
	//	 * The parse tree from a CombinatorExpression will always yield a linked list
	//	 * (maximally-unbalanced, right-sided tree), but this way it's easier to
	//	 * assign the specific combinator and surrounding whitespace so that the object
	//	 * is re-serializable.
	//	 * / SimpleSelectorSequence returns Selector hidden():
	//	{SimpleSelectorSequence} (head=(TypeSelector | UniversalSelector) simpleSelectors+=TailSimpleSelector* |
	//	simpleSelectors+=TailSimpleSelector+);
	public SimpleSelectorSequenceElements getSimpleSelectorSequenceAccess() {
		return (pSimpleSelectorSequence != null) ? pSimpleSelectorSequence : (pSimpleSelectorSequence = new SimpleSelectorSequenceElements());
	}
	
	public ParserRule getSimpleSelectorSequenceRule() {
		return getSimpleSelectorSequenceAccess().getRule();
	}

	//// validation: only last element may be a PseudoElementSelector (sub type of PseudoSelector)
	//// synthetic type to limit choice for parser, without need for validation
	//TailSimpleSelector returns SimpleSelector:
	//	IDSelector | AttributeSelector | ClassSelector | PseudoSelector | NegationSelector;
	public TailSimpleSelectorElements getTailSimpleSelectorAccess() {
		return (pTailSimpleSelector != null) ? pTailSimpleSelector : (pTailSimpleSelector = new TailSimpleSelectorElements());
	}
	
	public ParserRule getTailSimpleSelectorRule() {
		return getTailSimpleSelectorAccess().getRule();
	}

	//// convenience super type, also references by Less grammar
	//SimpleSelector:
	//	TypeSelector | UniversalSelector | AttributeSelector | IDSelector | ClassSelector | PseudoSelector | NegationSelector;
	public SimpleSelectorElements getSimpleSelectorAccess() {
		return (pSimpleSelector != null) ? pSimpleSelector : (pSimpleSelector = new SimpleSelectorElements());
	}
	
	public ParserRule getSimpleSelectorRule() {
		return getSimpleSelectorAccess().getRule();
	}

	//TypeSelector:
	//	namespacePrefix=NamespacePrefix? type=IDENT;
	public TypeSelectorElements getTypeSelectorAccess() {
		return (pTypeSelector != null) ? pTypeSelector : (pTypeSelector = new TypeSelectorElements());
	}
	
	public ParserRule getTypeSelectorRule() {
		return getTypeSelectorAccess().getRule();
	}

	//// validation: check (warning) whether type is a known HTML element
	/// *
	//	 * We don't want to know about all HTML elements since each element's name
	//	 * would become a keyword in the language, so we'd have to quote them
	//	 * explicitly at numerous spots.
	//	 * / NamespacePrefix:
	//	({NamespacePrefix} namespace=[NamespaceDeclaration|IDENT] | {UniversalNamespacePrefix} "*") "|" |
	//	{WithoutNamespacePrefix} "|";
	public NamespacePrefixElements getNamespacePrefixAccess() {
		return (pNamespacePrefix != null) ? pNamespacePrefix : (pNamespacePrefix = new NamespacePrefixElements());
	}
	
	public ParserRule getNamespacePrefixRule() {
		return getNamespacePrefixAccess().getRule();
	}

	//UniversalSelector:
	//	{UniversalSelector} namespacePrefix=NamespacePrefix? "*";
	public UniversalSelectorElements getUniversalSelectorAccess() {
		return (pUniversalSelector != null) ? pUniversalSelector : (pUniversalSelector = new UniversalSelectorElements());
	}
	
	public ParserRule getUniversalSelectorRule() {
		return getUniversalSelectorAccess().getRule();
	}

	//AttributeSelector hidden(WS):
	//	"[" attribute=Attribute (matcher=AttributeSelectorMatchers value=AttributeValueLiteral)? // !matcher.eIsSet means: AttributePresenceSelector
	//	"]";
	public AttributeSelectorElements getAttributeSelectorAccess() {
		return (pAttributeSelector != null) ? pAttributeSelector : (pAttributeSelector = new AttributeSelectorElements());
	}
	
	public ParserRule getAttributeSelectorRule() {
		return getAttributeSelectorAccess().getRule();
	}

	//// TODO  try to find a solution which has better hierarchy (e.g., AttributeValueSelector and AttributePresenceSelector)
	//Attribute hidden():
	//	namespacePrefix=NamespacePrefix? name=IDENT;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//enum AttributeSelectorMatchers:
	//	prefix="^=" | suffix="$=" | substring="*=" | exact= // TODO  check name
	//	"=" | includes="~=" | language= // TODO  check name
	//	"|=";
	public AttributeSelectorMatchersElements getAttributeSelectorMatchersAccess() {
		return (unknownRuleAttributeSelectorMatchers != null) ? unknownRuleAttributeSelectorMatchers : (unknownRuleAttributeSelectorMatchers = new AttributeSelectorMatchersElements());
	}
	
	public EnumRule getAttributeSelectorMatchersRule() {
		return getAttributeSelectorMatchersAccess().getRule();
	}

	//AttributeValueLiteral:
	//	{StringAttributeValueLiteral} value=(IDENT | STRING) | {IntegerAttributeValueLiteral} value=INT |
	//	{DecimalAttributeValueLiteral} value=DECIMAL;
	public AttributeValueLiteralElements getAttributeValueLiteralAccess() {
		return (pAttributeValueLiteral != null) ? pAttributeValueLiteral : (pAttributeValueLiteral = new AttributeValueLiteralElements());
	}
	
	public ParserRule getAttributeValueLiteralRule() {
		return getAttributeValueLiteralAccess().getRule();
	}

	//// TODO  check whether this complies with CSS def.!
	//IDSelector:
	//	name=(HASH_ID // RGB_COLOR has priority but is otherwise subsumed by HASH_ID
	//	| HEX_COLOR);
	public IDSelectorElements getIDSelectorAccess() {
		return (pIDSelector != null) ? pIDSelector : (pIDSelector = new IDSelectorElements());
	}
	
	public ParserRule getIDSelectorRule() {
		return getIDSelectorAccess().getRule();
	}

	//ClassSelector:
	//	name=DOT_ID;
	public ClassSelectorElements getClassSelectorAccess() {
		return (pClassSelector != null) ? pClassSelector : (pClassSelector = new ClassSelectorElements());
	}
	
	public ParserRule getClassSelectorRule() {
		return getClassSelectorAccess().getRule();
	}

	//PseudoSelector:
	//	NoArgsPseudoClassSelector | PseudoElementSelector | LanguagePseudoClassSelector | FunctionalPseudoClassSelector;
	public PseudoSelectorElements getPseudoSelectorAccess() {
		return (pPseudoSelector != null) ? pPseudoSelector : (pPseudoSelector = new PseudoSelectorElements());
	}
	
	public ParserRule getPseudoSelectorRule() {
		return getPseudoSelectorAccess().getRule();
	}

	//NoArgsPseudoClassSelector hidden():
	//	":" pseudo=NoArgsPseudos;
	public NoArgsPseudoClassSelectorElements getNoArgsPseudoClassSelectorAccess() {
		return (pNoArgsPseudoClassSelector != null) ? pNoArgsPseudoClassSelector : (pNoArgsPseudoClassSelector = new NoArgsPseudoClassSelectorElements());
	}
	
	public ParserRule getNoArgsPseudoClassSelectorRule() {
		return getNoArgsPseudoClassSelectorAccess().getRule();
	}

	//enum NoArgsPseudos:
	//	link | visited | hover | active | focus | target | enabled | disabled | checked | indeterminate | root |
	//	firstChild="first-child" | lastChild="last-child" | onlyChild="only-child" | empty;
	public NoArgsPseudosElements getNoArgsPseudosAccess() {
		return (unknownRuleNoArgsPseudos != null) ? unknownRuleNoArgsPseudos : (unknownRuleNoArgsPseudos = new NoArgsPseudosElements());
	}
	
	public EnumRule getNoArgsPseudosRule() {
		return getNoArgsPseudosAccess().getRule();
	}

	//PseudoElementSelector hidden():
	//	":" doubleSemiColon?=":"? pseudo=PseudoElements;
	public PseudoElementSelectorElements getPseudoElementSelectorAccess() {
		return (pPseudoElementSelector != null) ? pPseudoElementSelector : (pPseudoElementSelector = new PseudoElementSelectorElements());
	}
	
	public ParserRule getPseudoElementSelectorRule() {
		return getPseudoElementSelectorAccess().getRule();
	}

	//enum PseudoElements:
	//	firstLetter="first-letter" | firstLine="first-line" | before | after;
	public PseudoElementsElements getPseudoElementsAccess() {
		return (unknownRulePseudoElements != null) ? unknownRulePseudoElements : (unknownRulePseudoElements = new PseudoElementsElements());
	}
	
	public EnumRule getPseudoElementsRule() {
		return getPseudoElementsAccess().getRule();
	}

	//// validation: warning if "legacy" pseudo-element is used with only a single semi-colon
	//LanguagePseudoClassSelector hidden():
	//	":" "lang" "(" langugageId=IDENT ")";
	public LanguagePseudoClassSelectorElements getLanguagePseudoClassSelectorAccess() {
		return (pLanguagePseudoClassSelector != null) ? pLanguagePseudoClassSelector : (pLanguagePseudoClassSelector = new LanguagePseudoClassSelectorElements());
	}
	
	public ParserRule getLanguagePseudoClassSelectorRule() {
		return getLanguagePseudoClassSelectorAccess().getRule();
	}

	//// validation: language matches /\w+(-\w+)?/
	//FunctionalPseudoClassSelector hidden():
	//	":" pseudo=FunctionalPseudoClasses "(" argument=TypeArgument ")";
	public FunctionalPseudoClassSelectorElements getFunctionalPseudoClassSelectorAccess() {
		return (pFunctionalPseudoClassSelector != null) ? pFunctionalPseudoClassSelector : (pFunctionalPseudoClassSelector = new FunctionalPseudoClassSelectorElements());
	}
	
	public ParserRule getFunctionalPseudoClassSelectorRule() {
		return getFunctionalPseudoClassSelectorAccess().getRule();
	}

	//enum FunctionalPseudoClasses:
	//	nthChild="nth-child" | nthLastChild="nth-last-child" | nthOfType="nth-of-type" | nthLastOfType="nth-last-if-type" |
	//	firstOfType="first-of-type" | lastOfType="last-of-type" | onlyOfType="only-of-type";
	public FunctionalPseudoClassesElements getFunctionalPseudoClassesAccess() {
		return (unknownRuleFunctionalPseudoClasses != null) ? unknownRuleFunctionalPseudoClasses : (unknownRuleFunctionalPseudoClasses = new FunctionalPseudoClassesElements());
	}
	
	public EnumRule getFunctionalPseudoClassesRule() {
		return getFunctionalPseudoClassesAccess().getRule();
	}

	////	| {TokensArgument} token=IDENT ('+')
	//TypeArgument hidden(WS):
	//	ParityArgument | LinearArgument | ConstantArgument;
	public TypeArgumentElements getTypeArgumentAccess() {
		return (pTypeArgument != null) ? pTypeArgument : (pTypeArgument = new TypeArgumentElements());
	}
	
	public ParserRule getTypeArgumentRule() {
		return getTypeArgumentAccess().getRule();
	}

	//LinearArgument hidden(WS):
	//	{LinearArgument} coefficient=Coefficient (constantSign=("-" | "+")? constant=INT)?;
	public LinearArgumentElements getLinearArgumentAccess() {
		return (pLinearArgument != null) ? pLinearArgument : (pLinearArgument = new LinearArgumentElements());
	}
	
	public ParserRule getLinearArgumentRule() {
		return getLinearArgumentAccess().getRule();
	}

	//// separate rule to control whitespace
	//Coefficient hidden():
	//	ident=IDENT | {Coefficient} int=INT? "n";
	public CoefficientElements getCoefficientAccess() {
		return (pCoefficient != null) ? pCoefficient : (pCoefficient = new CoefficientElements());
	}
	
	public ParserRule getCoefficientRule() {
		return getCoefficientAccess().getRule();
	}

	//// TODO  validation on ident
	//// separate rule to control whitespace
	//ConstantArgument hidden():
	//	sign=("-" | "+")? int=INT;
	public ConstantArgumentElements getConstantArgumentAccess() {
		return (pConstantArgument != null) ? pConstantArgument : (pConstantArgument = new ConstantArgumentElements());
	}
	
	public ParserRule getConstantArgumentRule() {
		return getConstantArgumentAccess().getRule();
	}

	//ParityArgument:
	//	parity=Parities;
	public ParityArgumentElements getParityArgumentAccess() {
		return (pParityArgument != null) ? pParityArgument : (pParityArgument = new ParityArgumentElements());
	}
	
	public ParserRule getParityArgumentRule() {
		return getParityArgumentAccess().getRule();
	}

	//enum Parities:
	//	odd | even;
	public ParitiesElements getParitiesAccess() {
		return (unknownRuleParities != null) ? unknownRuleParities : (unknownRuleParities = new ParitiesElements());
	}
	
	public EnumRule getParitiesRule() {
		return getParitiesAccess().getRule();
	}

	//NegationSelector hidden():
	//	":" "not(" simpleSelector=NegationSimpleSelector ")";
	public NegationSelectorElements getNegationSelectorAccess() {
		return (pNegationSelector != null) ? pNegationSelector : (pNegationSelector = new NegationSelectorElements());
	}
	
	public ParserRule getNegationSelectorRule() {
		return getNegationSelectorAccess().getRule();
	}

	//// synthetic type to limit choice for parser, without need for validation
	//NegationSimpleSelector returns SimpleSelector:
	//	TypeSelector | UniversalSelector | AttributeSelector | IDSelector | ClassSelector | PseudoSelector;
	public NegationSimpleSelectorElements getNegationSimpleSelectorAccess() {
		return (pNegationSimpleSelector != null) ? pNegationSimpleSelector : (pNegationSimpleSelector = new NegationSimpleSelectorElements());
	}
	
	public ParserRule getNegationSimpleSelectorRule() {
		return getNegationSimpleSelectorAccess().getRule();
	}

	/// *
	// * +---------------------+
	// * | CSS property values |
	// * +---------------------+
	// * / // TODO  transform this into another expression sub language to deal with all the peculiarities (e.g. concatenation of bare words has higher precedence than juxtaposition with commas?)
	//ValueLiteral:
	//	SizeLiteral | StringLiteral | ColorLiteral | URLLiteral | // | BareWordLiteral
	//	FunctionCallLiteral;
	public ValueLiteralElements getValueLiteralAccess() {
		return (pValueLiteral != null) ? pValueLiteral : (pValueLiteral = new ValueLiteralElements());
	}
	
	public ParserRule getValueLiteralRule() {
		return getValueLiteralAccess().getRule();
	}

	//NumberLiteral:
	//	{IntegerLiteral} int=INT | {DecimalLiteral} decimal=DECIMAL;
	public NumberLiteralElements getNumberLiteralAccess() {
		return (pNumberLiteral != null) ? pNumberLiteral : (pNumberLiteral = new NumberLiteralElements());
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//SizeLiteral hidden():
	//	({QuantifiedSizeLiteral} number=NumberLiteral dimension=Dimensions? | {QualifiedSizeLiteral} bareword=IDENT) ("/"
	//	{FontHeightLiteral.fontHeight=current} lineHeight=NumberLiteral lineHeightDimension=Dimensions?)?;
	public SizeLiteralElements getSizeLiteralAccess() {
		return (pSizeLiteral != null) ? pSizeLiteral : (pSizeLiteral = new SizeLiteralElements());
	}
	
	public ParserRule getSizeLiteralRule() {
		return getSizeLiteralAccess().getRule();
	}

	//enum Dimensions:
	//	in | cm | mm | pt | pc | em | ex | px | perc="%";
	public DimensionsElements getDimensionsAccess() {
		return (unknownRuleDimensions != null) ? unknownRuleDimensions : (unknownRuleDimensions = new DimensionsElements());
	}
	
	public EnumRule getDimensionsRule() {
		return getDimensionsAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//ColorLiteral:
	//	{RGBColor} rgb=HEX_COLOR | {NamedColor} color=ColorNames | ComponentColorLiteral;
	public ColorLiteralElements getColorLiteralAccess() {
		return (pColorLiteral != null) ? pColorLiteral : (pColorLiteral = new ColorLiteralElements());
	}
	
	public ParserRule getColorLiteralRule() {
		return getColorLiteralAccess().getRule();
	}

	//ComponentColorLiteral:
	//	{ComponentRGBColor} "rgb" "(" red=ColorComponentLiteral "," green=ColorComponentLiteral "," blue=ColorComponentLiteral
	//	")" | {ComponentRGBAlphaColor} "rgba" "(" red=ColorComponentLiteral "," green=ColorComponentLiteral ","
	//	blue=ColorComponentLiteral "," opacity=ColorComponentLiteral ")" | {ComponentHSLColor} "hsl" "("
	//	hue=ColorComponentLiteral "," saturation=ColorComponentLiteral "," lightness=ColorComponentLiteral ")" |
	//	{ComponentHSLAlphaColor} "hsla" "(" hue=ColorComponentLiteral "," saturation=ColorComponentLiteral ","
	//	lightness=ColorComponentLiteral "," opacity=ColorComponentLiteral ")";
	public ComponentColorLiteralElements getComponentColorLiteralAccess() {
		return (pComponentColorLiteral != null) ? pComponentColorLiteral : (pComponentColorLiteral = new ComponentColorLiteralElements());
	}
	
	public ParserRule getComponentColorLiteralRule() {
		return getComponentColorLiteralAccess().getRule();
	}

	//// validation on ComponentRGBColor:
	////	either all percentages (with correct range, and non-optional % for 0[.0]), or all dimension-less integers 0-255
	//// validation on ComponentRGBAlphaColor:
	////	see ComponentRGBColor + opacity is a dimension-less number between 0.0 and 1.0
	//// validation on ComponentHSLColor:
	////	all percentages (with correct range, and non-optional % for 0[.0])
	//ColorComponentLiteral hidden():
	//	number=NumberLiteral percentage?="%"?;
	public ColorComponentLiteralElements getColorComponentLiteralAccess() {
		return (pColorComponentLiteral != null) ? pColorComponentLiteral : (pColorComponentLiteral = new ColorComponentLiteralElements());
	}
	
	public ParserRule getColorComponentLiteralRule() {
		return getColorComponentLiteralAccess().getRule();
	}

	//enum ColorNames:
	//	black | // | ...
	//	white;
	public ColorNamesElements getColorNamesAccess() {
		return (unknownRuleColorNames != null) ? unknownRuleColorNames : (unknownRuleColorNames = new ColorNamesElements());
	}
	
	public EnumRule getColorNamesRule() {
		return getColorNamesAccess().getRule();
	}

	//// TODO  generate into this grammar to provide content assist/code completion
	//URLLiteral:
	//	value=URL;
	public URLLiteralElements getURLLiteralAccess() {
		return (pURLLiteral != null) ? pURLLiteral : (pURLLiteral = new URLLiteralElements());
	}
	
	public ParserRule getURLLiteralRule() {
		return getURLLiteralAccess().getRule();
	}

	//// something we don't know about:
	//BareWordLiteral:
	//	bareWord=IDENT;
	public BareWordLiteralElements getBareWordLiteralAccess() {
		return (pBareWordLiteral != null) ? pBareWordLiteral : (pBareWordLiteral = new BareWordLiteralElements());
	}
	
	public ParserRule getBareWordLiteralRule() {
		return getBareWordLiteralAccess().getRule();
	}

	//FunctionCallLiteral:
	//	function=IDENT "(" (arguments+=ValueLiteral ("," arguments+=ValueLiteral)*)? ")" | {AlphaLiteral} "alpha" "("
	//	"opacity" "=" opacity=NumberLiteral ")";
	public FunctionCallLiteralElements getFunctionCallLiteralAccess() {
		return (pFunctionCallLiteral != null) ? pFunctionCallLiteral : (pFunctionCallLiteral = new FunctionCallLiteralElements());
	}
	
	public ParserRule getFunctionCallLiteralRule() {
		return getFunctionCallLiteralAccess().getRule();
	}

	//// TODO  add validation
	/// *
	// * +-----------+
	// * | Terminals |
	// * +-----------+
	// * / terminal HEX_COLOR:
	//	"#" HEX_DIGIT+;
	public TerminalRule getHEX_COLORRule() {
		return (tHEX_COLOR != null) ? tHEX_COLOR : (tHEX_COLOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_COLOR"));
	} 

	//// validation: exactly 3 or 6 hex-digits
	//// CSSValueConverterService#RGB_COLOR takes care of removing the '#' and validation
	/// *
	//	 * Note that this terminal rule must come before the HASH_ID one,
	//	 * since the latter subsumes the first.
	//	 * / terminal IDENT:
	//	ID_START ID_PART*;
	public TerminalRule getIDENTRule() {
		return (tIDENT != null) ? tIDENT : (tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT"));
	} 

	//// special terminal for ID..euhmm..id's:
	//terminal HASH_ID:
	//	"#" PREFIXABLE_ID_START ID_PART*;
	public TerminalRule getHASH_IDRule() {
		return (tHASH_ID != null) ? tHASH_ID : (tHASH_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HASH_ID"));
	} 

	//// CSSValueConverterService#HASH_ID takes care of removing the '#'
	//// special terminal for class references:
	//terminal DOT_ID:
	//	"." PREFIXABLE_ID_START ID_PART*;
	public TerminalRule getDOT_IDRule() {
		return (tDOT_ID != null) ? tDOT_ID : (tDOT_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT_ID"));
	} 

	//// CSSValueConverterService#DOT_ID takes care of removing the '.'
	//terminal URL:
	//	"url("->")";
	public TerminalRule getURLRule() {
		return (tURL != null) ? tURL : (tURL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "URL"));
	} 

	/// *
	//	 * CSSValueConverterService#URL takes care of removing the whitespace so that
	//	 * the rule effectively becomes: 'url(' WS? .. WS? ')' with WS hidden (transiently)
	//	 * / // TODO  validation on url itself
	//terminal INT returns ecore::EInt:
	//	DEC_DIGIT+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal DECIMAL returns ecore::EDouble:
	//	"-"? DEC_DIGIT* "." DEC_DIGIT+;
	public TerminalRule getDECIMALRule() {
		return (tDECIMAL != null) ? tDECIMAL : (tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL"));
	} 

	//terminal fragment HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return (tHEX_DIGIT != null) ? tHEX_DIGIT : (tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT"));
	} 

	//terminal fragment DEC_DIGIT:
	//	"0".."9";
	public TerminalRule getDEC_DIGITRule() {
		return (tDEC_DIGIT != null) ? tDEC_DIGIT : (tDEC_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEC_DIGIT"));
	} 

	//terminal fragment ID_PART:
	//	"a".."z" | "A".."Z" | "_" | "-" | "0".."9";
	public TerminalRule getID_PARTRule() {
		return (tID_PART != null) ? tID_PART : (tID_PART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID_PART"));
	} 

	//terminal fragment ID_START:
	//	PREFIXABLE_ID_START | "-";
	public TerminalRule getID_STARTRule() {
		return (tID_START != null) ? tID_START : (tID_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID_START"));
	} 

	//terminal fragment PREFIXABLE_ID_START:
	//	"a".."z" | "A".."Z" | "_";
	public TerminalRule getPREFIXABLE_ID_STARTRule() {
		return (tPREFIXABLE_ID_START != null) ? tPREFIXABLE_ID_START : (tPREFIXABLE_ID_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PREFIXABLE_ID_START"));
	} 

	//// copied from common.Terminals grammar
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//// copied from common.Terminals grammar
	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//// TODO  add '\f' without causing Xtext generation problems
	/// *
	// * Roadmap:
	// * 
	// * 	1) W3C compliant lexing
	// *  2) W3C specification harvesting -> generate into grammar
	// * / terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
