module nl.dslmeinte.xtext.css.GenerateCSS

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/nl/dslmeinte/xtext/css/CSS.xtext"
var file.extensions = "css"
var projectName = "nl.dslmeinte.xtext.css"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen"
    }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        pathTestProject = "${runtimeProject}.tests"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        language = {

            uri = grammarURI
            fileExtensions = file.extensions

            fragment = grammarAccess.GrammarAccessFragment {}

            fragment = ecore.EcoreGeneratorFragment {}

            fragment = serializer.SerializerFragment {
//            	generateStub = false
            }

            fragment = resourceFactory.ResourceFactoryFragment {
                fileExtensions = file.extensions
            }

            fragment = parser.antlr.XtextAntlrGeneratorFragment {
//            	options = { ignoreCase=true }
            }

            fragment = validation.JavaValidatorFragment {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
//                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            fragment = scoping.ImportURIScopingFragment {}
            fragment = nl.dslmeinte.xtext.CorrectedSimpleNamesFragment {}

            fragment = formatting.FormatterFragment {}

//            fragment = junit.Junit4Fragment {}

            fragment = builder.BuilderIntegrationFragment {}
            fragment = labeling.LabelProviderFragment {}
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}
            fragment = quickfix.QuickfixProviderFragment {}
            fragment = contentAssist.JavaBasedContentAssistFragment {}
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {
//            	options = { ignoreCase=true }
            }
            fragment = templates.CodetemplatesGeneratorFragment {}

            fragment = refactoring.RefactorElementNameFragment {}
            fragment = compare.CompareFragment {
                 fileExtensions = file.extensions
            }

        }
    }

}
